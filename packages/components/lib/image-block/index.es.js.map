{"version":3,"file":"index.es.js","sources":["../../src/__internal__/meta.ts","../../src/image-block/schema.ts","../../src/image-block/remark-plugin.ts","../../src/image-block/config.ts","../../src/__internal__/helper.ts","../../src/image-block/view/event.ts","../../src/image-block/view/component.ts","../../src/image-block/view/index.ts","../../src/image-block/index.ts"],"sourcesContent":["import type { Meta, MilkdownPlugin } from '@milkdown/ctx'\n\nexport function withMeta<T extends MilkdownPlugin>(plugin: T, meta: Partial<Meta> & Pick<Meta, 'displayName'>): T {\n  Object.assign(plugin, {\n    meta: {\n      package: '@milkdown/components',\n      ...meta,\n    },\n  })\n\n  return plugin\n}\n","import { $nodeSchema } from '@milkdown/utils'\nimport { expectDomTypeError } from '@milkdown/exception'\nimport { withMeta } from '../__internal__/meta'\n\nexport const IMAGE_DATA_TYPE = 'image-block'\n\nexport const imageBlockSchema = $nodeSchema('image-block', () => {\n  return {\n    inline: false,\n    group: 'block',\n    selectable: true,\n    draggable: true,\n    isolating: true,\n    marks: '',\n    atom: true,\n    priority: 100,\n    attrs: {\n      src: { default: '' },\n      caption: { default: '' },\n      ratio: { default: 1 },\n    },\n    parseDOM: [\n      {\n        tag: `img[data-type=\"${IMAGE_DATA_TYPE}\"]`,\n        getAttrs: (dom) => {\n          if (!(dom instanceof HTMLElement))\n            throw expectDomTypeError(dom)\n\n          return {\n            src: dom.getAttribute('src') || '',\n            caption: dom.getAttribute('caption') || '',\n            ratio: Number(dom.getAttribute('ratio') ?? 1),\n          }\n        },\n      },\n    ],\n    toDOM: node =>\n      ['img', { 'data-type': IMAGE_DATA_TYPE, ...node.attrs }],\n    parseMarkdown: {\n      match: ({ type }) => type === 'image-block',\n      runner: (state, node, type) => {\n        const src = node.url as string\n        const caption = (node.title) as string\n        let ratio = Number(node.alt as string || 1)\n        if (Number.isNaN(ratio) || ratio === 0)\n          ratio = 1\n\n        state.addNode(type, {\n          src,\n          caption,\n          ratio,\n        })\n      },\n    },\n    toMarkdown: {\n      match: node => node.type.name === 'image-block',\n      runner: (state, node) => {\n        state.openNode('paragraph')\n        state.addNode('image', undefined, undefined, {\n          title: node.attrs.caption,\n          url: node.attrs.src,\n          alt: `${Number.parseFloat(node.attrs.ratio).toFixed(2)}`,\n        })\n        state.closeNode()\n      },\n    },\n  }\n})\n\nwithMeta(imageBlockSchema.node, {\n  displayName: 'NodeSchema<image-block>',\n  group: 'ImageBlock',\n})\n","import type { Node } from '@milkdown/transformer'\nimport { visit } from 'unist-util-visit'\nimport { $remark } from '@milkdown/utils'\nimport { withMeta } from '../__internal__/meta'\n\nfunction visitImage(ast: Node) {\n  return visit(ast, 'paragraph', (node: Node & { children?: Node[] }, index: number, parent: Node & { children: Node[] }) => {\n    if (node.children?.length !== 1)\n      return\n    const firstChild = node.children?.[0]\n    if (!firstChild || firstChild.type !== 'image')\n      return\n\n    const { url, alt, title } = firstChild as Node & { url: string, alt: string, title: string }\n    const newNode = {\n      type: 'image-block',\n      url,\n      alt,\n      title,\n    }\n\n    parent.children.splice(index, 1, newNode)\n  })\n}\n\nexport const remarkImageBlockPlugin = $remark('remark-image-block', () => () => visitImage)\n\nwithMeta(remarkImageBlockPlugin.plugin, {\n  displayName: 'Remark<remarkImageBlock>',\n  group: 'ImageBlock',\n})\n\nwithMeta(remarkImageBlockPlugin.options, {\n  displayName: 'RemarkConfig<remarkImageBlock>',\n  group: 'ImageBlock',\n})\n","import { $ctx } from '@milkdown/utils'\nimport { html } from 'atomico'\nimport { withMeta } from '../__internal__/meta'\n\nexport interface ImageBlockConfig {\n  imageIcon: () => ReturnType<typeof html> | string | HTMLElement\n  captionIcon: () => ReturnType<typeof html> | string | HTMLElement\n  uploadButton: () => ReturnType<typeof html> | string | HTMLElement\n  confirmButton: () => ReturnType<typeof html> | string | HTMLElement\n  uploadPlaceholderText: string\n  captionPlaceholderText: string\n  onUpload: (file: File) => Promise<string>\n}\n\nexport const defaultImageBlockConfig: ImageBlockConfig = {\n  imageIcon: () => '🌌',\n  captionIcon: () => '💬',\n  uploadButton: () => html`Upload file`,\n  confirmButton: () => html`Confirm ⏎`,\n  uploadPlaceholderText: 'or paste the image link ...',\n  captionPlaceholderText: 'Image caption',\n  onUpload: file => Promise.resolve(URL.createObjectURL(file)),\n}\n\nexport const imageBlockConfig = $ctx(defaultImageBlockConfig, 'imageBlockConfigCtx')\n\nwithMeta(imageBlockConfig, {\n  displayName: 'Config<image-block>',\n  group: 'ImageBlock',\n})\n","export function defIfNotExists(tagName: string, element: CustomElementConstructor) {\n  const current = customElements.get(tagName)\n  if (current == null) {\n    customElements.define(tagName, element)\n    return\n  }\n\n  if (current === element)\n    return\n\n  // eslint-disable-next-line no-console\n  console.warn(`Custom element ${tagName} has been defined before.`)\n}\n","import { type Ref, useEffect, useHost, useMemo } from 'atomico'\n\ninterface Options {\n  image: Ref<HTMLImageElement>\n  resizeHandle: Ref<HTMLDivElement>\n  ratio: number\n  setRatio: (ratio: number) => void\n  src: string\n}\n\nexport function useBlockEffect({\n  image,\n  resizeHandle,\n  ratio,\n  setRatio,\n  src,\n}: Options) {\n  const host = useHost()\n  const root = useMemo(() => host.current.getRootNode() as HTMLElement, [host])\n\n  useEffect(() => {\n    const imageRef = image.current\n    if (!imageRef)\n      return\n\n    delete imageRef.dataset.origin\n    delete imageRef.dataset.height\n    imageRef.style.height = ''\n  }, [src])\n\n  useEffect(() => {\n    const resizeHandleRef = resizeHandle.current\n    const imageRef = image.current\n    if (!resizeHandleRef || !imageRef)\n      return\n    const onMove = (e: PointerEvent) => {\n      e.preventDefault()\n      const top = imageRef.getBoundingClientRect().top\n      const height = e.clientY - top\n      const h = Number(height < 100 ? 100 : height).toFixed(2)\n      imageRef.dataset.height = h\n      imageRef.style.height = `${h}px`\n    }\n    const pointerUp = () => {\n      root.removeEventListener('pointermove', onMove)\n      root.removeEventListener('pointerup', pointerUp)\n      const originHeight = Number(imageRef.dataset.origin)\n      const currentHeight = Number(imageRef.dataset.height)\n      const ratio = Number.parseFloat(Number(currentHeight / originHeight).toFixed(2))\n      if (Number.isNaN(ratio))\n        return\n\n      setRatio(ratio)\n    }\n\n    const pointerDown = (e: PointerEvent) => {\n      e.preventDefault()\n      root.addEventListener('pointermove', onMove)\n      root.addEventListener('pointerup', pointerUp)\n    }\n\n    const onLoad = (e: Event) => {\n      const maxWidth = host.current.getBoundingClientRect().width\n      if (!maxWidth)\n        return\n\n      const target = e.target as HTMLImageElement\n      const height = target.height\n      const width = target.width\n      const transformedHeight = width < maxWidth ? height : maxWidth * (height / width)\n      const h = (transformedHeight * ratio).toFixed(2)\n      imageRef.dataset.origin = transformedHeight.toFixed(2)\n      imageRef.dataset.height = h\n      imageRef.style.height = `${h}px`\n    }\n\n    imageRef.addEventListener('load', onLoad)\n    resizeHandleRef.addEventListener('pointerdown', pointerDown)\n    return () => {\n      imageRef.removeEventListener('load', onLoad)\n      resizeHandleRef.removeEventListener('pointerdown', pointerDown)\n    }\n  }, [])\n}\n","import type { Component } from 'atomico'\nimport { c, html, useEffect, useRef, useState } from 'atomico'\nimport clsx from 'clsx'\nimport type { ImageBlockConfig } from '../config'\nimport { IMAGE_DATA_TYPE } from '../schema'\nimport { useBlockEffect } from './event'\n\nexport interface Attrs {\n  src: string\n  caption: string\n  ratio: number\n}\n\nexport type ImageComponentProps = Attrs & {\n  config: ImageBlockConfig\n  selected: boolean\n  readonly: boolean\n  setAttr: <T extends keyof Attrs>(attr: T, value: Attrs[T]) => void\n}\n\nlet timer: number = 0\n\nexport const imageComponent: Component<ImageComponentProps> = ({\n  src = '',\n  caption = '',\n  ratio = 1,\n  selected = false,\n  readonly = false,\n  setAttr,\n  config,\n}) => {\n  const image = useRef<HTMLImageElement>()\n  const resizeHandle = useRef<HTMLDivElement>()\n  const linkInput = useRef<HTMLInputElement>()\n  const [showCaption, setShowCaption] = useState(caption.length > 0)\n  const [hidePlaceholder, setHidePlaceholder] = useState(src.length !== 0)\n  const [uuid] = useState(crypto.randomUUID())\n  const [focusLinkInput, setFocusLinkInput] = useState(false)\n  const [currentLink, setCurrentLink] = useState(src)\n\n  useBlockEffect({\n    image,\n    resizeHandle,\n    ratio,\n    setRatio: r => setAttr?.('ratio', r),\n    src,\n  })\n\n  useEffect(() => {\n    if (selected)\n      return\n\n    setShowCaption(caption.length > 0)\n  }, [selected])\n\n  const onInput = (e: InputEvent) => {\n    const target = e.target as HTMLInputElement\n    const value = target.value\n    if (timer)\n      window.clearTimeout(timer)\n\n    timer = window.setTimeout(() => {\n      setAttr?.('caption', value)\n    }, 1000)\n  }\n\n  const onBlurCaption = (e: InputEvent) => {\n    const target = e.target as HTMLInputElement\n    const value = target.value\n    if (timer) {\n      window.clearTimeout(timer)\n      timer = 0\n    }\n\n    setAttr?.('caption', value)\n  }\n\n  const onEditLink = (e: InputEvent) => {\n    const target = e.target as HTMLInputElement\n    const value = target.value\n    setHidePlaceholder(value.length !== 0)\n    setCurrentLink(value)\n  }\n\n  const onUpload = async (e: InputEvent) => {\n    const file = (e.target as HTMLInputElement).files?.[0]\n    if (!file)\n      return\n\n    const url = await config?.onUpload(file)\n    if (!url)\n      return\n\n    setAttr?.('src', url)\n    setHidePlaceholder(true)\n  }\n\n  const onToggleCaption = (e: Event) => {\n    e.preventDefault()\n    e.stopPropagation()\n    if (readonly)\n      return\n    setShowCaption(x => !x)\n  }\n\n  const onConfirmLinkInput = () => {\n    setAttr?.('src', linkInput.current?.value ?? '')\n  }\n\n  const onKeydown = (e: KeyboardEvent) => {\n    if (e.key === 'Enter')\n      onConfirmLinkInput()\n  }\n\n  const preventDrag = (e: Event) => {\n    e.preventDefault()\n    e.stopPropagation()\n  }\n\n  const onClickUploader = (e: PointerEvent) => {\n    e.stopPropagation()\n    e.preventDefault()\n  }\n\n  return html`<host class=${clsx(selected && 'selected')}>\n    <div class=${clsx('image-edit', src.length > 0 && 'hidden')}>\n      <div class=\"image-icon\">\n        ${config?.imageIcon()}\n      </div>\n      <div class=${clsx('link-importer', focusLinkInput && 'focus')}>\n        <input\n          ref=${linkInput}\n          draggable=\"true\"\n          ondragstart=${preventDrag}\n          disabled=${readonly}\n          class=\"link-input-area\"\n          value=${currentLink}\n          oninput=${onEditLink}\n          onkeydown=${onKeydown}\n          onfocus=${() => setFocusLinkInput(true)}\n          onblur=${() => setFocusLinkInput(false)}\n        />\n        <div class=${clsx('placeholder', hidePlaceholder && 'hidden')}>\n          <input disabled=${readonly} class=\"hidden\" id=${uuid} type=\"file\" accept=\"image/*\" onchange=${onUpload} />\n          <label onpointerdown=${onClickUploader} class=\"uploader\" for=${uuid}>\n            ${config?.uploadButton()}\n          </label>\n          <span class=\"text\" onclick=${() => linkInput.current?.focus()}>\n            ${config?.uploadPlaceholderText}\n          </span>\n        </div>\n      </div>\n      <div\n        class=${clsx('confirm', currentLink.length === 0 && 'hidden')}\n        onclick=${() => onConfirmLinkInput()}\n      >\n        ${config?.confirmButton()}\n      </div>\n    </div>\n    <div class=${clsx('image-wrapper', src.length === 0 && 'hidden')}>\n      <div class=\"operation\">\n        <div class=\"operation-item\" onpointerdown=${onToggleCaption}>${config?.captionIcon()}</div>\n      </div>\n      <img ref=${image} data-type=${IMAGE_DATA_TYPE} src=${src} alt=${caption} ratio=${ratio} />\n      <div ref=${resizeHandle} class=\"image-resize-handle\"></div>\n    </div>\n    <input\n      draggable=\"true\"\n      ondragstart=${preventDrag}\n      class=${clsx('caption-input', !showCaption && 'hidden')}\n      placeholder=${config?.captionPlaceholderText}\n      oninput=${onInput}\n      onblur=${onBlurCaption}\n      value=${caption}\n    />\n  </host>`\n}\n\nimageComponent.props = {\n  src: String,\n  caption: String,\n  ratio: Number,\n  selected: Boolean,\n  readonly: Boolean,\n  setAttr: Function,\n  config: Object,\n}\n\nexport const ImageElement = c(imageComponent)\n","import { $view } from '@milkdown/utils'\nimport type { NodeViewConstructor } from '@milkdown/prose/view'\nimport type { Node } from '@milkdown/prose/model'\nimport { imageBlockSchema } from '../schema'\nimport { imageBlockConfig } from '../config'\nimport { withMeta } from '../../__internal__/meta'\nimport { defIfNotExists } from '../../__internal__/helper'\nimport type { ImageComponentProps } from './component'\nimport { ImageElement } from './component'\n\ndefIfNotExists('milkdown-image-block', ImageElement)\nexport const imageBlockView = $view(imageBlockSchema.node, (ctx): NodeViewConstructor => {\n  return (initialNode, view, getPos) => {\n    const dom = document.createElement('milkdown-image-block') as HTMLElement & ImageComponentProps\n    const config = ctx.get(imageBlockConfig.key)\n    const bindAttrs = (node: Node) => {\n      dom.src = node.attrs.src\n      dom.ratio = node.attrs.ratio\n      dom.caption = node.attrs.caption\n\n      dom.readonly = !view.editable\n    }\n\n    bindAttrs(initialNode)\n    dom.selected = false\n    dom.setAttr = (attr, value) => {\n      const pos = getPos()\n      if (pos == null)\n        return\n\n      view.dispatch(view.state.tr.setNodeAttribute(pos, attr, value))\n    }\n    dom.config = config\n    return {\n      dom,\n      update: (updatedNode) => {\n        if (updatedNode.type !== initialNode.type)\n          return false\n\n        bindAttrs(updatedNode)\n        return true\n      },\n      stopEvent: (e) => {\n        if (e.target instanceof HTMLInputElement)\n          return true\n\n        return false\n      },\n      selectNode: () => {\n        dom.selected = true\n      },\n      deselectNode: () => {\n        dom.selected = false\n      },\n      destroy: () => {\n        dom.remove()\n      },\n    }\n  }\n})\n\nwithMeta(imageBlockView, {\n  displayName: 'NodeView<image-block>',\n  group: 'ImageBlock',\n})\n","import type { MilkdownPlugin } from '@milkdown/ctx'\nimport { imageBlockSchema } from './schema'\nimport { remarkImageBlockPlugin } from './remark-plugin'\nimport { imageBlockView } from './view'\nimport { imageBlockConfig } from './config'\n\nexport * from './schema'\nexport * from './remark-plugin'\nexport * from './config'\nexport * from './view'\n\nexport const imageBlockComponent: MilkdownPlugin[] = [\n  remarkImageBlockPlugin,\n  imageBlockSchema,\n  imageBlockView,\n  imageBlockConfig,\n].flat()\n"],"names":["__spreadValues","ratio"],"mappings":"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"}