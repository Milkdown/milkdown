{"version":3,"file":"index.es.js","sources":["../../src/__internal__/meta.ts","../../src/image-block/schema.ts","../../src/image-block/remark-plugin.ts","../../src/image-block/config.ts","../../src/__internal__/helper.ts","../../src/image-block/view/event.ts","../../src/image-block/view/component.ts","../../src/image-block/view/index.ts","../../src/image-block/index.ts"],"sourcesContent":["import type { Meta, MilkdownPlugin } from '@milkdown/ctx'\n\nexport function withMeta<T extends MilkdownPlugin>(\n  plugin: T,\n  meta: Partial<Meta> & Pick<Meta, 'displayName'>\n): T {\n  Object.assign(plugin, {\n    meta: {\n      package: '@milkdown-nota/components',\n      ...meta,\n    },\n  })\n\n  return plugin\n}\n","import { $nodeSchema } from '@milkdown/utils'\nimport { expectDomTypeError } from '@milkdown/exception'\nimport { withMeta } from '../__internal__/meta'\n\nexport const IMAGE_DATA_TYPE = 'image-block'\n\nexport const imageBlockSchema = $nodeSchema('image-block', () => {\n  return {\n    inline: false,\n    group: 'block',\n    selectable: true,\n    draggable: true,\n    isolating: true,\n    marks: '',\n    atom: true,\n    priority: 100,\n    attrs: {\n      src: { default: '' },\n      caption: { default: '' },\n      ratio: { default: 1 },\n    },\n    parseDOM: [\n      {\n        tag: `img[data-type=\"${IMAGE_DATA_TYPE}\"]`,\n        getAttrs: (dom) => {\n          if (!(dom instanceof HTMLElement)) throw expectDomTypeError(dom)\n\n          return {\n            src: dom.getAttribute('src') || '',\n            caption: dom.getAttribute('caption') || '',\n            ratio: Number(dom.getAttribute('ratio') ?? 1),\n          }\n        },\n      },\n    ],\n    toDOM: (node) => ['img', { 'data-type': IMAGE_DATA_TYPE, ...node.attrs }],\n    parseMarkdown: {\n      match: ({ type }) => type === 'image-block',\n      runner: (state, node, type) => {\n        const src = node.url as string\n        const caption = node.title as string\n        let ratio = Number((node.alt as string) || 1)\n        if (Number.isNaN(ratio) || ratio === 0) ratio = 1\n\n        state.addNode(type, {\n          src,\n          caption,\n          ratio,\n        })\n      },\n    },\n    toMarkdown: {\n      match: (node) => node.type.name === 'image-block',\n      runner: (state, node) => {\n        state.openNode('paragraph')\n        state.addNode('image', undefined, undefined, {\n          title: node.attrs.caption,\n          url: node.attrs.src,\n          alt: `${Number.parseFloat(node.attrs.ratio).toFixed(2)}`,\n        })\n        state.closeNode()\n      },\n    },\n  }\n})\n\nwithMeta(imageBlockSchema.node, {\n  displayName: 'NodeSchema<image-block>',\n  group: 'ImageBlock',\n})\n","import type { Node } from '@milkdown/transformer'\nimport { visit } from 'unist-util-visit'\nimport { $remark } from '@milkdown/utils'\nimport { withMeta } from '../__internal__/meta'\n\nfunction visitImage(ast: Node) {\n  return visit(\n    ast,\n    'paragraph',\n    (\n      node: Node & { children?: Node[] },\n      index: number,\n      parent: Node & { children: Node[] }\n    ) => {\n      if (node.children?.length !== 1) return\n      const firstChild = node.children?.[0]\n      if (!firstChild || firstChild.type !== 'image') return\n\n      const { url, alt, title } = firstChild as Node & {\n        url: string\n        alt: string\n        title: string\n      }\n      const newNode = {\n        type: 'image-block',\n        url,\n        alt,\n        title,\n      }\n\n      parent.children.splice(index, 1, newNode)\n    }\n  )\n}\n\nexport const remarkImageBlockPlugin = $remark(\n  'remark-image-block',\n  () => () => visitImage\n)\n\nwithMeta(remarkImageBlockPlugin.plugin, {\n  displayName: 'Remark<remarkImageBlock>',\n  group: 'ImageBlock',\n})\n\nwithMeta(remarkImageBlockPlugin.options, {\n  displayName: 'RemarkConfig<remarkImageBlock>',\n  group: 'ImageBlock',\n})\n","import { $ctx } from '@milkdown/utils'\nimport { html } from 'atomico'\nimport { withMeta } from '../__internal__/meta'\n\nexport interface ImageBlockConfig {\n  imageIcon: () => ReturnType<typeof html> | string | HTMLElement\n  captionIcon: () => ReturnType<typeof html> | string | HTMLElement\n  uploadButton: () => ReturnType<typeof html> | string | HTMLElement\n  confirmButton: () => ReturnType<typeof html> | string | HTMLElement\n  uploadPlaceholderText: string\n  captionPlaceholderText: string\n  onUpload: (file: File) => Promise<string>\n  getActualSrc: (src: string) => Promise<string>\n}\n\nexport const defaultImageBlockConfig: ImageBlockConfig = {\n  imageIcon: () => '🌌',\n  captionIcon: () => '💬',\n  uploadButton: () => html`Upload file`,\n  confirmButton: () => html`Confirm ⏎`,\n  uploadPlaceholderText: 'or paste the image link ...',\n  captionPlaceholderText: 'Image caption',\n  onUpload: (file) => Promise.resolve(URL.createObjectURL(file)),\n  getActualSrc: async (src: string) => src,\n}\n\nexport const imageBlockConfig = $ctx(\n  defaultImageBlockConfig,\n  'imageBlockConfigCtx'\n)\n\nwithMeta(imageBlockConfig, {\n  displayName: 'Config<image-block>',\n  group: 'ImageBlock',\n})\n","export function defIfNotExists(\n  tagName: string,\n  element: CustomElementConstructor\n) {\n  const current = customElements.get(tagName)\n  if (current == null) {\n    customElements.define(tagName, element)\n    return\n  }\n\n  if (current === element) return\n\n  // eslint-disable-next-line no-console\n  console.warn(`Custom element ${tagName} has been defined before.`)\n}\n","import { type Ref, useEffect, useHost, useMemo } from 'atomico'\n\ninterface Options {\n  image: Ref<HTMLImageElement>\n  resizeHandle: Ref<HTMLDivElement>\n  ratio: number\n  setRatio: (ratio: number) => void\n  src: string\n}\n\nexport function useBlockEffect({\n  image,\n  resizeHandle,\n  ratio,\n  setRatio,\n  src,\n}: Options) {\n  const host = useHost()\n  const root = useMemo(() => host.current.getRootNode() as HTMLElement, [host])\n\n  useEffect(() => {\n    const imageRef = image.current\n    if (!imageRef) return\n\n    delete imageRef.dataset.origin\n    delete imageRef.dataset.height\n    imageRef.style.height = ''\n  }, [src])\n\n  useEffect(() => {\n    const resizeHandleRef = resizeHandle.current\n    const imageRef = image.current\n    if (!resizeHandleRef || !imageRef) return\n    const onMove = (e: PointerEvent) => {\n      e.preventDefault()\n      const top = imageRef.getBoundingClientRect().top\n      const height = e.clientY - top\n      const h = Number(height < 100 ? 100 : height).toFixed(2)\n      imageRef.dataset.height = h\n      imageRef.style.height = `${h}px`\n    }\n    const pointerUp = () => {\n      root.removeEventListener('pointermove', onMove)\n      root.removeEventListener('pointerup', pointerUp)\n      const originHeight = Number(imageRef.dataset.origin)\n      const currentHeight = Number(imageRef.dataset.height)\n      const ratio = Number.parseFloat(\n        Number(currentHeight / originHeight).toFixed(2)\n      )\n      if (Number.isNaN(ratio)) return\n\n      setRatio(ratio)\n    }\n\n    const pointerDown = (e: PointerEvent) => {\n      e.preventDefault()\n      root.addEventListener('pointermove', onMove)\n      root.addEventListener('pointerup', pointerUp)\n    }\n\n    const onLoad = (e: Event) => {\n      const maxWidth = host.current.getBoundingClientRect().width\n      if (!maxWidth) return\n\n      const target = e.target as HTMLImageElement\n      const height = target.height\n      const width = target.width\n      const transformedHeight =\n        width < maxWidth ? height : maxWidth * (height / width)\n      const h = (transformedHeight * ratio).toFixed(2)\n      imageRef.dataset.origin = transformedHeight.toFixed(2)\n      imageRef.dataset.height = h\n      imageRef.style.height = `${h}px`\n    }\n\n    imageRef.addEventListener('load', onLoad)\n    resizeHandleRef.addEventListener('pointerdown', pointerDown)\n    return () => {\n      imageRef.removeEventListener('load', onLoad)\n      resizeHandleRef.removeEventListener('pointerdown', pointerDown)\n    }\n  }, [])\n}\n","import type { Component } from 'atomico'\nimport { c, html, useEffect, useRef, useState } from 'atomico'\nimport clsx from 'clsx'\nimport type { ImageBlockConfig } from '../config'\nimport { IMAGE_DATA_TYPE } from '../schema'\nimport { useBlockEffect } from './event'\n\nexport interface Attrs {\n  src: string\n  caption: string\n  ratio: number\n}\n\nexport type ImageComponentProps = Attrs & {\n  config: ImageBlockConfig\n  selected: boolean\n  readonly: boolean\n  setAttr: <T extends keyof Attrs>(attr: T, value: Attrs[T]) => void\n}\n\nlet timer: number = 0\n\nexport const imageComponent: Component<ImageComponentProps> = ({\n  src = '',\n  caption = '',\n  ratio = 1,\n  selected = false,\n  readonly = false,\n  setAttr,\n  config,\n}) => {\n  const image = useRef<HTMLImageElement>()\n  const resizeHandle = useRef<HTMLDivElement>()\n  const linkInput = useRef<HTMLInputElement>()\n  const [showCaption, setShowCaption] = useState(caption.length > 0)\n  const [hidePlaceholder, setHidePlaceholder] = useState(src.length !== 0)\n  const [uuid] = useState(crypto.randomUUID())\n  const [focusLinkInput, setFocusLinkInput] = useState(false)\n  const [currentLink, setCurrentLink] = useState(src)\n\n  useBlockEffect({\n    image,\n    resizeHandle,\n    ratio,\n    setRatio: (r) => setAttr?.('ratio', r),\n    src,\n  })\n\n  useEffect(() => {\n    if (selected) return\n\n    setShowCaption(caption.length > 0)\n  }, [selected])\n\n  useEffect(() => {\n    config?.getActualSrc(src).then((actualSrc) => {\n      setAttr?.('src', actualSrc)\n    })\n  }, [src])\n\n  const onInput = (e: InputEvent) => {\n    const target = e.target as HTMLInputElement\n    const value = target.value\n    if (timer) window.clearTimeout(timer)\n\n    timer = window.setTimeout(() => {\n      setAttr?.('caption', value)\n    }, 1000)\n  }\n\n  const onBlurCaption = (e: InputEvent) => {\n    const target = e.target as HTMLInputElement\n    const value = target.value\n    if (timer) {\n      window.clearTimeout(timer)\n      timer = 0\n    }\n\n    setAttr?.('caption', value)\n  }\n\n  const onEditLink = (e: InputEvent) => {\n    const target = e.target as HTMLInputElement\n    const value = target.value\n    setHidePlaceholder(value.length !== 0)\n    setCurrentLink(value)\n  }\n\n  const onUpload = async (e: InputEvent) => {\n    const file = (e.target as HTMLInputElement).files?.[0]\n    if (!file) return\n\n    const url = await config?.onUpload(file)\n    if (!url) return\n\n    setAttr?.('src', url)\n    setHidePlaceholder(true)\n  }\n\n  const onToggleCaption = (e: Event) => {\n    e.preventDefault()\n    e.stopPropagation()\n    if (readonly) return\n    setShowCaption((x) => !x)\n  }\n\n  const onConfirmLinkInput = () => {\n    setAttr?.('src', linkInput.current?.value ?? '')\n  }\n\n  const onKeydown = (e: KeyboardEvent) => {\n    if (e.key === 'Enter') onConfirmLinkInput()\n  }\n\n  const preventDrag = (e: Event) => {\n    e.preventDefault()\n    e.stopPropagation()\n  }\n\n  const onClickUploader = (e: PointerEvent) => {\n    e.stopPropagation()\n    e.preventDefault()\n  }\n\n  return html`<host class=${clsx(selected && 'selected')}>\n    <div class=${clsx('image-edit', src.length > 0 && 'hidden')}>\n      <div class=\"image-icon\">${config?.imageIcon()}</div>\n      <div class=${clsx('link-importer', focusLinkInput && 'focus')}>\n        <input\n          ref=${linkInput}\n          draggable=\"true\"\n          ondragstart=${preventDrag}\n          disabled=${readonly}\n          class=\"link-input-area\"\n          value=${currentLink}\n          oninput=${onEditLink}\n          onkeydown=${onKeydown}\n          onfocus=${() => setFocusLinkInput(true)}\n          onblur=${() => setFocusLinkInput(false)}\n        />\n        <div class=${clsx('placeholder', hidePlaceholder && 'hidden')}>\n          <input\n            disabled=${readonly}\n            class=\"hidden\"\n            id=${uuid}\n            type=\"file\"\n            accept=\"image/*\"\n            onchange=${onUpload}\n          />\n          <label onpointerdown=${onClickUploader} class=\"uploader\" for=${uuid}>\n            ${config?.uploadButton()}\n          </label>\n          <span class=\"text\" onclick=${() => linkInput.current?.focus()}>\n            ${config?.uploadPlaceholderText}\n          </span>\n        </div>\n      </div>\n      <div\n        class=${clsx('confirm', currentLink.length === 0 && 'hidden')}\n        onclick=${() => onConfirmLinkInput()}\n      >\n        ${config?.confirmButton()}\n      </div>\n    </div>\n    <div class=${clsx('image-wrapper', src.length === 0 && 'hidden')}>\n      <div class=\"operation\">\n        <div class=\"operation-item\" onpointerdown=${onToggleCaption}>\n          ${config?.captionIcon()}\n        </div>\n      </div>\n      <img\n        ref=${image}\n        data-type=${IMAGE_DATA_TYPE}\n        src=${src}\n        alt=${caption}\n        ratio=${ratio}\n      />\n      <div ref=${resizeHandle} class=\"image-resize-handle\"></div>\n    </div>\n    <input\n      draggable=\"true\"\n      ondragstart=${preventDrag}\n      class=${clsx('caption-input', !showCaption && 'hidden')}\n      placeholder=${config?.captionPlaceholderText}\n      oninput=${onInput}\n      onblur=${onBlurCaption}\n      value=${caption}\n    />\n  </host>`\n}\n\nimageComponent.props = {\n  src: String,\n  caption: String,\n  ratio: Number,\n  selected: Boolean,\n  readonly: Boolean,\n  setAttr: Function,\n  config: Object,\n}\n\nexport const ImageElement = c(imageComponent)\n","import { $view } from '@milkdown/utils'\nimport type { NodeViewConstructor } from '@milkdown/prose/view'\nimport type { Node } from '@milkdown/prose/model'\nimport { imageBlockSchema } from '../schema'\nimport { imageBlockConfig } from '../config'\nimport { withMeta } from '../../__internal__/meta'\nimport { defIfNotExists } from '../../__internal__/helper'\nimport type { ImageComponentProps } from './component'\nimport { ImageElement } from './component'\n\ndefIfNotExists('milkdown-image-block', ImageElement)\nexport const imageBlockView = $view(\n  imageBlockSchema.node,\n  (ctx): NodeViewConstructor => {\n    return (initialNode, view, getPos) => {\n      const dom = document.createElement(\n        'milkdown-image-block'\n      ) as HTMLElement & ImageComponentProps\n      const config = ctx.get(imageBlockConfig.key)\n      const bindAttrs = (node: Node) => {\n        dom.src = node.attrs.src\n        dom.ratio = node.attrs.ratio\n        dom.caption = node.attrs.caption\n\n        dom.readonly = !view.editable\n      }\n\n      bindAttrs(initialNode)\n      dom.selected = false\n      dom.setAttr = (attr, value) => {\n        const pos = getPos()\n        if (pos == null) return\n\n        view.dispatch(view.state.tr.setNodeAttribute(pos, attr, value))\n      }\n      dom.config = config\n      return {\n        dom,\n        update: (updatedNode) => {\n          if (updatedNode.type !== initialNode.type) return false\n\n          bindAttrs(updatedNode)\n          return true\n        },\n        stopEvent: (e) => {\n          if (e.target instanceof HTMLInputElement) return true\n\n          return false\n        },\n        selectNode: () => {\n          dom.selected = true\n        },\n        deselectNode: () => {\n          dom.selected = false\n        },\n        destroy: () => {\n          dom.remove()\n        },\n      }\n    }\n  }\n)\n\nwithMeta(imageBlockView, {\n  displayName: 'NodeView<image-block>',\n  group: 'ImageBlock',\n})\n","import type { MilkdownPlugin } from '@milkdown/ctx'\nimport { imageBlockSchema } from './schema'\nimport { remarkImageBlockPlugin } from './remark-plugin'\nimport { imageBlockView } from './view'\nimport { imageBlockConfig } from './config'\n\nexport * from './schema'\nexport * from './remark-plugin'\nexport * from './config'\nexport * from './view'\n\nexport const imageBlockComponent: MilkdownPlugin[] = [\n  remarkImageBlockPlugin,\n  imageBlockSchema,\n  imageBlockView,\n  imageBlockConfig,\n].flat()\n"],"names":["__spreadValues","__async","ratio"],"mappings":"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"}