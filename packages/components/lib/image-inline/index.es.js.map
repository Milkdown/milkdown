{"version":3,"file":"index.es.js","sources":["../../src/__internal__/meta.ts","../../src/image-inline/config.ts","../../src/__internal__/helper.ts","../../src/image-inline/component.ts","../../src/image-inline/view.ts","../../src/image-inline/index.ts"],"sourcesContent":["import type { Meta, MilkdownPlugin } from '@milkdown/ctx'\n\nexport function withMeta<T extends MilkdownPlugin>(plugin: T, meta: Partial<Meta> & Pick<Meta, 'displayName'>): T {\n  Object.assign(plugin, {\n    meta: {\n      package: '@milkdown/components',\n      ...meta,\n    },\n  })\n\n  return plugin\n}\n","import { $ctx } from '@milkdown/utils'\nimport { html } from 'atomico'\nimport { withMeta } from '../__internal__/meta'\n\nexport interface InlineImageConfig {\n  imageIcon: () => ReturnType<typeof html>\n  uploadButton: () => ReturnType<typeof html>\n  confirmButton: () => ReturnType<typeof html>\n  uploadPlaceholderText: string\n  onUpload: (file: File) => Promise<string>\n}\n\nexport const defaultInlineImageConfig: InlineImageConfig = {\n  imageIcon: () => '🌌',\n  uploadButton: () => html`Upload`,\n  confirmButton: () => html`⏎`,\n  uploadPlaceholderText: '/Paste',\n  onUpload: file => Promise.resolve(URL.createObjectURL(file)),\n}\n\nexport const inlineImageConfig = $ctx(defaultInlineImageConfig, 'inlineImageConfigCtx')\n\nwithMeta(inlineImageConfig, {\n  displayName: 'Config<image-inline>',\n  group: 'ImageInline',\n})\n","export function defIfNotExists(tagName: string, element: CustomElementConstructor) {\n  const current = customElements.get(tagName)\n  if (current == null) {\n    customElements.define(tagName, element)\n    return\n  }\n\n  if (current === element)\n    return\n\n  // eslint-disable-next-line no-console\n  console.warn(`Custom element ${tagName} has been defined before.`)\n}\n","import { c, html, useRef, useState } from 'atomico'\nimport type { Component } from 'atomico'\nimport clsx from 'clsx'\nimport type { InlineImageConfig } from './config'\n\nexport interface Attrs {\n  src: string\n  alt: string\n  title: string\n}\n\nexport type InlineImageComponentProps = Attrs & {\n  setAttr: <T extends keyof Attrs>(attr: T, value: Attrs[T]) => void\n  selected: boolean\n  config: InlineImageConfig\n}\n\nexport const inlineImageComponent: Component<InlineImageComponentProps> = ({\n  src = '',\n  selected = false,\n  alt,\n  title,\n  setAttr,\n  config,\n}) => {\n  const linkInput = useRef<HTMLInputElement>()\n  const [uuid] = useState(crypto.randomUUID())\n  const [focusLinkInput, setFocusLinkInput] = useState(false)\n  const [hidePlaceholder, setHidePlaceholder] = useState(src.length !== 0)\n  const [currentLink, setCurrentLink] = useState(src)\n\n  const onEditLink = (e: InputEvent) => {\n    const target = e.target as HTMLInputElement\n    const value = target.value\n    setHidePlaceholder(value.length !== 0)\n    setCurrentLink(value)\n  }\n\n  const onUpload = async (e: InputEvent) => {\n    const file = (e.target as HTMLInputElement).files?.[0]\n    if (!file)\n      return\n\n    const url = await config?.onUpload(file)\n    if (!url)\n      return\n\n    setAttr?.('src', url)\n    setHidePlaceholder(true)\n  }\n\n  const onConfirmLinkInput = () => {\n    setAttr?.('src', linkInput.current?.value ?? '')\n  }\n\n  const onKeydown = (e: KeyboardEvent) => {\n    if (e.key === 'Enter')\n      onConfirmLinkInput()\n  }\n\n  const preventDrag = (e: Event) => {\n    e.preventDefault()\n    e.stopPropagation()\n  }\n\n  const onClickUploader = (e: PointerEvent) => {\n    e.stopPropagation()\n    e.preventDefault()\n  }\n\n  return html`<host class=${clsx(selected && 'selected', !src && 'empty')}>\n    ${!src\n      ? html`<div class=\"empty-image-inline\">\n        <div class=\"image-icon\">\n          ${config?.imageIcon()}\n        </div>\n        <div class=${clsx('link-importer', focusLinkInput && 'focus')}>\n          <input\n            draggable=\"true\"\n            ref=${linkInput}\n            ondragstart=${preventDrag}\n            class=\"link-input-area\"\n            value=${currentLink}\n            oninput=${onEditLink}\n            onkeydown=${onKeydown}\n            onfocus=${() => setFocusLinkInput(true)}\n            onblur=${() => setFocusLinkInput(false)}\n          />\n          <div class=${clsx('placeholder', hidePlaceholder && 'hidden')}>\n            <input class=\"hidden\" id=${uuid} type=\"file\" accept=\"image/*\" onchange=${onUpload} />\n            <label onpointerdown=${onClickUploader} class=\"uploader\" for=${uuid}>\n              ${config?.uploadButton()}\n            </label>\n            <span class=\"text\" onclick=${() => linkInput.current?.focus()}>\n              ${config?.uploadPlaceholderText}\n            </span>\n          </div>\n        </div>\n        <div\n          class=${clsx('confirm', currentLink.length === 0 && 'hidden')}\n          onclick=${() => onConfirmLinkInput()}\n        >\n          ${config?.confirmButton()}\n        </div>\n      </div>`\n      : html`<img class=\"image-inline\" src=${src} alt=${alt} title=${title} />`\n    }\n  </host>`\n}\n\ninlineImageComponent.props = {\n  src: String,\n  alt: String,\n  title: String,\n  selected: Boolean,\n  setAttr: Function,\n  config: Object,\n}\n\nexport const InlineImageElement = c(inlineImageComponent)\n","import { $view } from '@milkdown/utils'\nimport type { NodeViewConstructor } from '@milkdown/prose/view'\nimport { imageSchema } from '@milkdown/preset-commonmark'\nimport type { Node } from '@milkdown/prose/model'\nimport { withMeta } from '../__internal__/meta'\nimport { defIfNotExists } from '../__internal__/helper'\nimport type { InlineImageComponentProps } from './component'\nimport { InlineImageElement } from './component'\nimport { inlineImageConfig } from './config'\n\ndefIfNotExists('milkdown-image-inline', InlineImageElement)\nexport const inlineImageView = $view(imageSchema.node, (ctx): NodeViewConstructor => {\n  return (initialNode, view, getPos) => {\n    const dom = document.createElement('milkdown-image-inline') as HTMLElement & InlineImageComponentProps\n    const config = ctx.get(inlineImageConfig.key)\n    const bindAttrs = (node: Node) => {\n      dom.src = node.attrs.src\n      dom.alt = node.attrs.alt\n      dom.title = node.attrs.title\n    }\n    bindAttrs(initialNode)\n    dom.selected = false\n    dom.setAttr = (attr, value) => {\n      const pos = getPos()\n      if (pos == null)\n        return\n\n      view.dispatch(view.state.tr.setNodeAttribute(pos, attr, value))\n    }\n    dom.config = config\n    return {\n      dom,\n      update: (updatedNode) => {\n        if (updatedNode.type !== initialNode.type)\n          return false\n\n        bindAttrs(updatedNode)\n        return true\n      },\n      stopEvent: (e) => {\n        if (dom.selected && e.target instanceof HTMLInputElement)\n          return true\n\n        return false\n      },\n      selectNode: () => {\n        dom.selected = true\n      },\n      deselectNode: () => {\n        dom.selected = false\n      },\n      destroy: () => {\n        dom.remove()\n      },\n    }\n  }\n})\n\nwithMeta(inlineImageView, {\n  displayName: 'NodeView<image-inline>',\n  group: 'ImageInline',\n})\n","import type { MilkdownPlugin } from '@milkdown/ctx'\nimport { inlineImageConfig } from './config'\nimport { inlineImageView } from './view'\n\nexport * from './config'\nexport * from './view'\n\nexport const imageInlineComponent: MilkdownPlugin[] = [\n  inlineImageConfig,\n  inlineImageView,\n]\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAEgB,SAAA,QAAA,CAAmC,QAAW,IAAoD,EAAA;AAChH,EAAA,MAAA,CAAO,OAAO,MAAQ,EAAA;AAAA,IACpB,IAAM,EAAA,cAAA,CAAA;AAAA,MACJ,OAAS,EAAA;AAAA,KACN,EAAA,IAAA;AAAA,GAEN,CAAA;AAED,EAAO,OAAA,MAAA;AACT;;ACCO,MAAM,wBAA8C,GAAA;AAAA,EACzD,WAAW,MAAM,WAAA;AAAA,EACjB,cAAc,MAAM,IAAA,CAAA,MAAA,CAAA;AAAA,EACpB,eAAe,MAAM,IAAA,CAAA,CAAA,CAAA;AAAA,EACrB,qBAAuB,EAAA,QAAA;AAAA,EACvB,UAAU,CAAQ,IAAA,KAAA,OAAA,CAAQ,QAAQ,GAAI,CAAA,eAAA,CAAgB,IAAI,CAAC;AAC7D;AAEa,MAAA,iBAAA,GAAoB,IAAK,CAAA,wBAAA,EAA0B,sBAAsB;AAEtF,QAAA,CAAS,iBAAmB,EAAA;AAAA,EAC1B,WAAa,EAAA,sBAAA;AAAA,EACb,KAAO,EAAA;AACT,CAAC,CAAA;;ACzBe,SAAA,cAAA,CAAe,SAAiB,OAAmC,EAAA;AACjF,EAAM,MAAA,OAAA,GAAU,cAAe,CAAA,GAAA,CAAI,OAAO,CAAA;AAC1C,EAAA,IAAI,WAAW,IAAM,EAAA;AACnB,IAAe,cAAA,CAAA,MAAA,CAAO,SAAS,OAAO,CAAA;AACtC,IAAA;AAAA;AAGF,EAAA,IAAI,OAAY,KAAA,OAAA;AACd,IAAA;AAGF,EAAQ,OAAA,CAAA,IAAA,CAAK,CAAkB,eAAA,EAAA,OAAO,CAA2B,yBAAA,CAAA,CAAA;AACnE;;;;;;;;;;;;;;;;;;;;;;ACKO,MAAM,uBAA6D,CAAC;AAAA,EACzE,GAAM,GAAA,EAAA;AAAA,EACN,QAAW,GAAA,KAAA;AAAA,EACX,GAAA;AAAA,EACA,KAAA;AAAA,EACA,OAAA;AAAA,EACA;AACF,CAAM,KAAA;AACJ,EAAA,MAAM,YAAY,MAAyB,EAAA;AAC3C,EAAA,MAAM,CAAC,IAAI,CAAA,GAAI,QAAS,CAAA,MAAA,CAAO,YAAY,CAAA;AAC3C,EAAA,MAAM,CAAC,cAAA,EAAgB,iBAAiB,CAAA,GAAI,SAAS,KAAK,CAAA;AAC1D,EAAA,MAAM,CAAC,eAAiB,EAAA,kBAAkB,IAAI,QAAS,CAAA,GAAA,CAAI,WAAW,CAAC,CAAA;AACvE,EAAA,MAAM,CAAC,WAAA,EAAa,cAAc,CAAA,GAAI,SAAS,GAAG,CAAA;AAElD,EAAM,MAAA,UAAA,GAAa,CAAC,CAAkB,KAAA;AACpC,IAAA,MAAM,SAAS,CAAE,CAAA,MAAA;AACjB,IAAA,MAAM,QAAQ,MAAO,CAAA,KAAA;AACrB,IAAmB,kBAAA,CAAA,KAAA,CAAM,WAAW,CAAC,CAAA;AACrC,IAAA,cAAA,CAAe,KAAK,CAAA;AAAA,GACtB;AAEA,EAAM,MAAA,QAAA,GAAW,CAAO,CAAkB,KAAA,OAAA,CAAA,KAAA,CAAA,EAAA,IAAA,EAAA,aAAA;AAtC5C,IAAA,IAAA,EAAA;AAuCI,IAAA,MAAM,IAAQ,GAAA,CAAA,EAAA,GAAA,CAAA,CAAE,MAA4B,CAAA,KAAA,KAA9B,IAAsC,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,CAAA,CAAA;AACpD,IAAA,IAAI,CAAC,IAAA;AACH,MAAA;AAEF,IAAM,MAAA,GAAA,GAAM,MAAM,MAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,MAAA,CAAQ,QAAS,CAAA,IAAA,CAAA;AACnC,IAAA,IAAI,CAAC,GAAA;AACH,MAAA;AAEF,IAAA,OAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,OAAA,CAAU,KAAO,EAAA,GAAA,CAAA;AACjB,IAAA,kBAAA,CAAmB,IAAI,CAAA;AAAA,GACzB,CAAA;AAEA,EAAA,MAAM,qBAAqB,MAAM;AAnDnC,IAAA,IAAA,EAAA,EAAA,EAAA;AAoDI,IAAA,OAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,OAAA,CAAU,KAAO,EAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,SAAA,CAAU,OAAV,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAmB,UAAnB,IAA4B,GAAA,EAAA,GAAA,EAAA,CAAA;AAAA,GAC/C;AAEA,EAAM,MAAA,SAAA,GAAY,CAAC,CAAqB,KAAA;AACtC,IAAA,IAAI,EAAE,GAAQ,KAAA,OAAA;AACZ,MAAmB,kBAAA,EAAA;AAAA,GACvB;AAEA,EAAM,MAAA,WAAA,GAAc,CAAC,CAAa,KAAA;AAChC,IAAA,CAAA,CAAE,cAAe,EAAA;AACjB,IAAA,CAAA,CAAE,eAAgB,EAAA;AAAA,GACpB;AAEA,EAAM,MAAA,eAAA,GAAkB,CAAC,CAAoB,KAAA;AAC3C,IAAA,CAAA,CAAE,eAAgB,EAAA;AAClB,IAAA,CAAA,CAAE,cAAe,EAAA;AAAA,GACnB;AAEA,EAAA,OAAO,mBAAmB,IAAK,CAAA,QAAA,IAAY,YAAY,CAAC,GAAA,IAAO,OAAO,CAAC,CAAA;AAAA,IAAA,EACnE,CAAC,GACC,GAAA,IAAA,CAAA;AAAA;AAAA,UAAA,EAEI,iCAAQ,SAAW,EAAA;AAAA;AAAA,mBAAA,EAEV,IAAK,CAAA,eAAA,EAAiB,cAAkB,IAAA,OAAO,CAAC,CAAA;AAAA;AAAA;AAAA,gBAAA,EAGnD,SAAS;AAAA,wBAAA,EACD,WAAW;AAAA;AAAA,kBAAA,EAEjB,WAAW;AAAA,oBAAA,EACT,UAAU;AAAA,sBAAA,EACR,SAAS;AAAA,oBACX,EAAA,MAAM,iBAAkB,CAAA,IAAI,CAAC;AAAA,mBAC9B,EAAA,MAAM,iBAAkB,CAAA,KAAK,CAAC;AAAA;AAAA,qBAAA,EAE5B,IAAK,CAAA,aAAA,EAAe,eAAmB,IAAA,QAAQ,CAAC,CAAA;AAAA,qCAChC,EAAA,IAAI,0CAA0C,QAAQ,CAAA;AAAA,iCAC1D,EAAA,eAAe,yBAAyB,IAAI,CAAA;AAAA,cAAA,EAC/D,iCAAQ,YAAc,EAAA;AAAA;AAAA,uCAAA,EAEG,MAAG;AA7F5C,IAAA,IAAA,EAAA;AA6F+C,IAAA,OAAA,CAAA,EAAA,GAAA,SAAA,CAAU,YAAV,IAAmB,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,KAAA,EAAA;AAAA,GAAO,CAAA;AAAA,cAAA,EACzD,iCAAQ,qBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAA,EAK3B,KAAK,SAAW,EAAA,WAAA,CAAY,MAAW,KAAA,CAAA,IAAK,QAAQ,CAAC;AAAA,kBACnD,EAAA,MAAM,oBAAoB;AAAA;AAAA,UAAA,EAElC,iCAAQ,aAAe,EAAA;AAAA;AAAA,YAAA,CAAA,GAG3B,qCAAqC,GAAG,CAAA,KAAA,EAAQ,GAAG,CAAA,OAAA,EAAU,KAAK,CACtE,GAAA,CAAA;AAAA,SAAA,CAAA;AAEJ,CAAA;AAEA,oBAAA,CAAqB,KAAQ,GAAA;AAAA,EAC3B,GAAK,EAAA,MAAA;AAAA,EACL,GAAK,EAAA,MAAA;AAAA,EACL,KAAO,EAAA,MAAA;AAAA,EACP,QAAU,EAAA,OAAA;AAAA,EACV,OAAS,EAAA,QAAA;AAAA,EACT,MAAQ,EAAA;AACV,CAAA;AAEa,MAAA,kBAAA,GAAqB,EAAE,oBAAoB,CAAA;;AC7GxD,cAAA,CAAe,yBAAyB,kBAAkB,CAAA;AACnD,MAAM,eAAkB,GAAA,KAAA,CAAM,WAAY,CAAA,IAAA,EAAM,CAAC,GAA6B,KAAA;AACnF,EAAO,OAAA,CAAC,WAAa,EAAA,IAAA,EAAM,MAAW,KAAA;AACpC,IAAM,MAAA,GAAA,GAAM,QAAS,CAAA,aAAA,CAAc,uBAAuB,CAAA;AAC1D,IAAA,MAAM,MAAS,GAAA,GAAA,CAAI,GAAI,CAAA,iBAAA,CAAkB,GAAG,CAAA;AAC5C,IAAM,MAAA,SAAA,GAAY,CAAC,IAAe,KAAA;AAChC,MAAI,GAAA,CAAA,GAAA,GAAM,KAAK,KAAM,CAAA,GAAA;AACrB,MAAI,GAAA,CAAA,GAAA,GAAM,KAAK,KAAM,CAAA,GAAA;AACrB,MAAI,GAAA,CAAA,KAAA,GAAQ,KAAK,KAAM,CAAA,KAAA;AAAA,KACzB;AACA,IAAA,SAAA,CAAU,WAAW,CAAA;AACrB,IAAA,GAAA,CAAI,QAAW,GAAA,KAAA;AACf,IAAI,GAAA,CAAA,OAAA,GAAU,CAAC,IAAA,EAAM,KAAU,KAAA;AAC7B,MAAA,MAAM,MAAM,MAAO,EAAA;AACnB,MAAA,IAAI,GAAO,IAAA,IAAA;AACT,QAAA;AAEF,MAAK,IAAA,CAAA,QAAA,CAAS,KAAK,KAAM,CAAA,EAAA,CAAG,iBAAiB,GAAK,EAAA,IAAA,EAAM,KAAK,CAAC,CAAA;AAAA,KAChE;AACA,IAAA,GAAA,CAAI,MAAS,GAAA,MAAA;AACb,IAAO,OAAA;AAAA,MACL,GAAA;AAAA,MACA,MAAA,EAAQ,CAAC,WAAgB,KAAA;AACvB,QAAI,IAAA,WAAA,CAAY,SAAS,WAAY,CAAA,IAAA;AACnC,UAAO,OAAA,KAAA;AAET,QAAA,SAAA,CAAU,WAAW,CAAA;AACrB,QAAO,OAAA,IAAA;AAAA,OACT;AAAA,MACA,SAAA,EAAW,CAAC,CAAM,KAAA;AAChB,QAAI,IAAA,GAAA,CAAI,QAAY,IAAA,CAAA,CAAE,MAAkB,YAAA,gBAAA;AACtC,UAAO,OAAA,IAAA;AAET,QAAO,OAAA,KAAA;AAAA,OACT;AAAA,MACA,YAAY,MAAM;AAChB,QAAA,GAAA,CAAI,QAAW,GAAA,IAAA;AAAA,OACjB;AAAA,MACA,cAAc,MAAM;AAClB,QAAA,GAAA,CAAI,QAAW,GAAA,KAAA;AAAA,OACjB;AAAA,MACA,SAAS,MAAM;AACb,QAAA,GAAA,CAAI,MAAO,EAAA;AAAA;AACb,KACF;AAAA,GACF;AACF,CAAC;AAED,QAAA,CAAS,eAAiB,EAAA;AAAA,EACxB,WAAa,EAAA,wBAAA;AAAA,EACb,KAAO,EAAA;AACT,CAAC,CAAA;;ACtDM,MAAM,oBAAyC,GAAA;AAAA,EACpD,iBAAA;AAAA,EACA;AACF;;;;"}