{"version":3,"file":"index.es.js","sources":["../src/composable/utils.ts","../src/composable/$command.ts","../src/composable/$inputRule.ts","../src/composable/$mark.ts","../src/composable/$node.ts","../src/composable/$prose.ts","../src/composable/$shortcut.ts","../src/composable/$view.ts","../src/composable/$ctx.ts","../src/composable/composed/$node-schema.ts","../src/composable/composed/$mark-schema.ts","../src/composable/composed/$user-keymap.ts","../src/composable/composed/$attr.ts","../src/composable/composed/$remark.ts","../src/macro/call-command.ts","../src/macro/force-update.ts","../src/macro/get-html.ts","../src/macro/get-markdown.ts","../src/macro/insert.ts","../src/macro/outline.ts","../src/macro/replace-all.ts","../src/macro/set-attr.ts","../src/pipe.ts"],"sourcesContent":["import type {\n  Cleanup,\n  Ctx,\n  MilkdownPlugin,\n  SliceType,\n  TimerType,\n} from '@milkdown/ctx'\nimport { createTimer } from '@milkdown/ctx'\nimport { customAlphabet } from 'nanoid'\n\n/// @internal\nexport const nanoid = customAlphabet('abcedfghicklmn', 10)\n\n/// @internal\nexport type WithTimer<T> = T & { timer: TimerType }\n\n/// @internal\nexport function addTimer<\n  T extends MilkdownPlugin,\n  PluginWithTimer extends T = WithTimer<T>,\n>(\n  runner: (\n    ctx: Ctx,\n    plugin: PluginWithTimer,\n    done: () => void\n  ) => Promise<void | Cleanup>,\n  injectTo: SliceType<TimerType[], string>,\n  timerName?: string\n): PluginWithTimer {\n  const timer = createTimer(timerName || nanoid())\n  let doneCalled = false\n\n  const plugin: MilkdownPlugin = (ctx) => {\n    ctx.record(timer)\n    ctx.update(injectTo, (x) => x.concat(timer))\n\n    return async () => {\n      const done = () => {\n        ctx.done(timer)\n        doneCalled = true\n      }\n\n      const cleanup = await runner(ctx, <PluginWithTimer>plugin, done)\n\n      if (!doneCalled) ctx.done(timer)\n\n      return () => {\n        ctx.update(injectTo, (x) => x.filter((y) => y !== timer))\n        ctx.clearTimer(timer)\n        cleanup?.()\n      }\n    }\n  }\n  ;(<T & { timer: TimerType }>plugin).timer = timer\n\n  return <PluginWithTimer>plugin\n}\n","import type { Cmd, CmdKey } from '@milkdown/core'\nimport type { Ctx, MilkdownPlugin } from '@milkdown/ctx'\nimport {\n  CommandsReady,\n  commandsCtx,\n  commandsTimerCtx,\n  createCmdKey,\n} from '@milkdown/core'\n\nimport { addTimer } from './utils'\n\n/// @internal\nexport type $Command<T> = MilkdownPlugin & {\n  run: (payload?: T) => boolean\n  key: CmdKey<T>\n}\n\n/// Create a command plugin. The command will be registered in the `commandsCtx` and can be called by other parts of the editor.\n/// It takes a key and a factory function. The factory function will be called when the plugin is created.\n/// The factory should return a function that will be called when the command is executed.\n/// The function should receive at **most one parameter**, which is the payload of the command.\n/// And the payload should always be **optional**.\n///\n/// ```ts\n/// import { setBlockType } from '@milkdown/prose/commands'\n///\n/// const commandPlugin = $command('SetAsHeading', (ctx) => {\n///   return (level = 1) => setBlockType(headingSchema.type(), { level });\n/// });\n/// ```\n///\n/// Additional property:\n/// - `key`: The key of the command.\n/// - `run`: The function to run the command.\n///\n/// You can use `callCommand` in `editor.action` to call the command.\n///\n/// ```ts\n/// import { callCommand } from '@milkdown/utils';\n/// const editor = Editor.make().use(/* some plugins */).use(commandPlugin).create();\n///\n/// editor.action(callCommand(commandPlugin.key, 3));\n/// ```\nexport function $command<T, K extends string>(\n  key: K,\n  cmd: (ctx: Ctx) => Cmd<T>\n): $Command<T> {\n  const cmdKey = createCmdKey<T>(key)\n\n  const plugin: MilkdownPlugin = (ctx) => async () => {\n    ;(<$Command<T>>plugin).key = cmdKey\n    await ctx.wait(CommandsReady)\n    const command = cmd(ctx)\n    ctx.get(commandsCtx).create(cmdKey, command)\n    ;(<$Command<T>>plugin).run = (payload?: T) =>\n      ctx.get(commandsCtx).call(key, payload)\n\n    return () => {\n      ctx.get(commandsCtx).remove(cmdKey)\n    }\n  }\n\n  return <$Command<T>>plugin\n}\n\n/// The async version for `$command`. You can use `await` in the factory when creating the command.\n/// ```ts\n/// const commandPlugin = $commandASync('LoadRemoteDoc', (ctx) => {\n///   return async (url = 'my-remote-api') => {\n///     const doc = await LoadRemoteDoc(url);\n///     return addDoc(doc);\n///   }\n/// });\n/// ```\n///\n/// Additional property:\n/// - `key`: The key of the command.\n/// - `run`: The function to run the command.\n/// - `timer`: The timer which will be resolved when the command is ready.\nexport function $commandAsync<T, K extends string>(\n  key: K,\n  cmd: (ctx: Ctx) => Promise<Cmd<T>>,\n  timerName?: string\n) {\n  const cmdKey = createCmdKey<T>(key)\n  return addTimer<$Command<T>>(\n    async (ctx, plugin) => {\n      await ctx.wait(CommandsReady)\n      const command = await cmd(ctx)\n      ctx.get(commandsCtx).create(cmdKey, command)\n      ;(<$Command<T>>plugin).run = (payload?: T) =>\n        ctx.get(commandsCtx).call(key, payload)\n      ;(<$Command<T>>plugin).key = cmdKey\n      return () => {\n        ctx.get(commandsCtx).remove(cmdKey)\n      }\n    },\n    commandsTimerCtx,\n    timerName\n  )\n}\n","import type { Ctx, MilkdownPlugin } from '@milkdown/ctx'\nimport { SchemaReady, editorStateTimerCtx, inputRulesCtx } from '@milkdown/core'\nimport type { InputRule } from '@milkdown/prose/inputrules'\n\nimport { addTimer } from './utils'\n\n/// @internal\nexport type $InputRule = MilkdownPlugin & {\n  inputRule: InputRule\n}\n\n/// Create an input rule plugin.\n/// It takes a factory function which returns a [prosemirror input rule](https://prosemirror.net/docs/ref/#inputrules.InputRule).\n///\n/// Additional property:\n/// - `inputRule`: The prosemirror input rule created.\nexport function $inputRule(inputRule: (ctx: Ctx) => InputRule): $InputRule {\n  const plugin: MilkdownPlugin = (ctx) => async () => {\n    await ctx.wait(SchemaReady)\n    const ir = inputRule(ctx)\n    ctx.update(inputRulesCtx, (irs) => [...irs, ir])\n    ;(<$InputRule>plugin).inputRule = ir\n\n    return () => {\n      ctx.update(inputRulesCtx, (irs) => irs.filter((x) => x !== ir))\n    }\n  }\n\n  return <$InputRule>plugin\n}\n\n/// The async version for `$inputRule`. You can use `await` in the factory when creating the input rule.\n///\n/// Additional property:\n/// - `inputRule`: The prosemirror input rule created.\n/// - `timer`: The timer which will be resolved when the input rule is ready.\nexport function $inputRuleAsync(\n  inputRule: (ctx: Ctx) => Promise<InputRule>,\n  timerName?: string\n) {\n  return addTimer<$InputRule>(\n    async (ctx, plugin) => {\n      await ctx.wait(SchemaReady)\n      const ir = await inputRule(ctx)\n      ctx.update(inputRulesCtx, (irs) => [...irs, ir])\n      plugin.inputRule = ir\n      return () => {\n        ctx.update(inputRulesCtx, (irs) => irs.filter((x) => x !== ir))\n      }\n    },\n    editorStateTimerCtx,\n    timerName\n  )\n}\n","import type { Ctx, MilkdownPlugin } from '@milkdown/ctx'\nimport type { MarkSchema } from '@milkdown/transformer'\nimport { marksCtx, schemaCtx, schemaTimerCtx } from '@milkdown/core'\nimport { missingMarkInSchema } from '@milkdown/exception'\nimport type { MarkType } from '@milkdown/prose/model'\n\nimport { addTimer } from './utils'\n\n/// @internal\nexport type $Mark = MilkdownPlugin & {\n  id: string\n  schema: MarkSchema\n  type: (ctx: Ctx) => MarkType\n}\n\n/// Create a mark plugin.\n/// It takes a mark id and a factory function.\n/// The factory should return a function that returns a [mark schema](/transformer#interface-markschema).\n///\n/// Additional property:\n/// - `id`: The id of the mark.\n/// - `schema`: The mark schema created.\n/// - `type`: A function that will return the [prosemirror mark type](https://prosemirror.net/docs/ref/#model.MarkType).\nexport function $mark(id: string, schema: (ctx: Ctx) => MarkSchema): $Mark {\n  const plugin: MilkdownPlugin = (ctx) => async () => {\n    const markSchema = schema(ctx)\n    ctx.update(marksCtx, (ns) => [\n      ...ns.filter((n) => n[0] !== id),\n      [id, markSchema] as [string, MarkSchema],\n    ])\n    ;(<$Mark>plugin).id = id\n    ;(<$Mark>plugin).schema = markSchema\n\n    return () => {\n      ctx.update(marksCtx, (ns) => ns.filter(([x]) => x !== id))\n    }\n  }\n  ;(<$Mark>plugin).type = (ctx) => {\n    const markType = ctx.get(schemaCtx).marks[id]\n    if (!markType) throw missingMarkInSchema(id)\n    return markType\n  }\n\n  return <$Mark>plugin\n}\n\n/// The async version for `$mark`. You can use `await` in the factory when creating the mark schema.\n///\n/// Additional property:\n/// - `id`: The id of the mark.\n/// - `schema`: The mark schema created.\n/// - `type`: A function that will return the [prosemirror mark type](https://prosemirror.net/docs/ref/#model.MarkType).\n/// - `timer`: The timer which will be resolved when the mark schema is ready.\nexport function $markAsync(\n  id: string,\n  schema: (ctx: Ctx) => Promise<MarkSchema>,\n  timerName?: string\n) {\n  const plugin = addTimer<$Mark>(\n    async (ctx, plugin, done) => {\n      const markSchema = await schema(ctx)\n      ctx.update(marksCtx, (ns) => [\n        ...ns.filter((n) => n[0] !== id),\n        [id, markSchema] as [string, MarkSchema],\n      ])\n\n      plugin.id = id\n      plugin.schema = markSchema\n      done()\n\n      return () => {\n        ctx.update(marksCtx, (ns) => ns.filter(([x]) => x !== id))\n      }\n    },\n    schemaTimerCtx,\n    timerName\n  )\n\n  plugin.type = (ctx) => {\n    const markType = ctx.get(schemaCtx).marks[id]\n    if (!markType) throw missingMarkInSchema(id)\n    return markType\n  }\n\n  return plugin\n}\n","import type { Ctx, MilkdownPlugin } from '@milkdown/ctx'\nimport { nodesCtx, schemaCtx, schemaTimerCtx } from '@milkdown/core'\nimport { missingNodeInSchema } from '@milkdown/exception'\nimport type { NodeType } from '@milkdown/prose/model'\n\nimport type { NodeSchema } from '@milkdown/transformer'\nimport { addTimer } from './utils'\n\n/// @internal\nexport type $Node = MilkdownPlugin & {\n  id: string\n  schema: NodeSchema\n  type: (ctx: Ctx) => NodeType\n}\n\n/// Create a node plugin.\n/// It takes a node id and a factory function.\n/// The factory should return a function that returns a [node schema](/transformer#interface-nodeschema).\n///\n/// Additional property:\n/// - `id`: The id of the node.\n/// - `schema`: The node schema created.\n/// - `type`: A function that will return the [prosemirror node type](https://prosemirror.net/docs/ref/#model.NodeType).\nexport function $node(id: string, schema: (ctx: Ctx) => NodeSchema): $Node {\n  const plugin: MilkdownPlugin = (ctx) => async () => {\n    const nodeSchema = schema(ctx)\n    ctx.update(nodesCtx, (ns) => [\n      ...ns.filter((n) => n[0] !== id),\n      [id, nodeSchema] as [string, NodeSchema],\n    ])\n    ;(<$Node>plugin).id = id\n    ;(<$Node>plugin).schema = nodeSchema\n\n    return () => {\n      ctx.update(nodesCtx, (ns) => ns.filter(([x]) => x !== id))\n    }\n  }\n\n  ;(<$Node>plugin).type = (ctx) => {\n    const nodeType = ctx.get(schemaCtx).nodes[id]\n    if (!nodeType) throw missingNodeInSchema(id)\n\n    return nodeType\n  }\n\n  return <$Node>plugin\n}\n\n/// The async version for `$node`. You can use `await` in the factory when creating the node schema.\n///\n/// Additional property:\n/// - `id`: The id of the node.\n/// - `schema`: The node schema created.\n/// - `type`: A function that will return the [prosemirror node type](https://prosemirror.net/docs/ref/#model.NodeType).\n/// - `timer`: The timer which will be resolved when the node schema is ready.\nexport function $nodeAsync(\n  id: string,\n  schema: (ctx: Ctx) => Promise<NodeSchema>,\n  timerName?: string\n) {\n  const plugin = addTimer<$Node>(\n    async (ctx, plugin, done) => {\n      const nodeSchema = await schema(ctx)\n      ctx.update(nodesCtx, (ns) => [\n        ...ns.filter((n) => n[0] !== id),\n        [id, nodeSchema] as [string, NodeSchema],\n      ])\n\n      plugin.id = id\n      plugin.schema = nodeSchema\n      done()\n\n      return () => {\n        ctx.update(nodesCtx, (ns) => ns.filter(([x]) => x !== id))\n      }\n    },\n    schemaTimerCtx,\n    timerName\n  )\n\n  plugin.type = (ctx) => {\n    const nodeType = ctx.get(schemaCtx).nodes[id]\n    if (!nodeType) throw missingNodeInSchema(id)\n\n    return nodeType\n  }\n\n  return plugin\n}\n","import type { Ctx, MilkdownPlugin } from '@milkdown/ctx'\nimport {\n  SchemaReady,\n  editorStateTimerCtx,\n  prosePluginsCtx,\n} from '@milkdown/core'\nimport type { Plugin, PluginKey } from '@milkdown/prose/state'\n\nimport { addTimer } from './utils'\n\n/// @internal\nexport type $Prose = MilkdownPlugin & {\n  plugin: () => Plugin\n  key: () => PluginKey | undefined\n}\n\n/// Create a milkdown wrapper for [prosemirror plugin](https://prosemirror.net/docs/ref/#state.Plugin).\n/// It takes a factory function which returns a [prosemirror plugin](https://prosemirror.net/docs/ref/#state.Plugin).\n///\n/// Additional property:\n/// - `plugin`: The prosemirror plugin created.\n/// - `key`: The [prosemirror plugin key](https://prosemirror.net/docs/ref/#state.PluginKey) of the plugin.\nexport function $prose(prose: (ctx: Ctx) => Plugin): $Prose {\n  let prosePlugin: Plugin | undefined\n  const plugin: MilkdownPlugin = (ctx) => async () => {\n    await ctx.wait(SchemaReady)\n    prosePlugin = prose(ctx)\n    ctx.update(prosePluginsCtx, (ps) => [...ps, prosePlugin!])\n\n    return () => {\n      ctx.update(prosePluginsCtx, (ps) => ps.filter((x) => x !== prosePlugin))\n    }\n  }\n  ;(<$Prose>plugin).plugin = () => prosePlugin!\n  ;(<$Prose>plugin).key = () => prosePlugin!.spec.key\n\n  return <$Prose>plugin\n}\n\n/// The async version for `$prose`. You can use `await` in the factory when creating the plugin.\n///\n/// Additional property:\n/// - `plugin`: The prosemirror plugin created.\n/// - `key`: The [prosemirror plugin key](https://prosemirror.net/docs/ref/#state.PluginKey) of the plugin.\n/// - `timer`: The timer which will be resolved when the plugin is ready.\nexport function $proseAsync(\n  prose: (ctx: Ctx) => Promise<Plugin>,\n  timerName?: string\n) {\n  let prosePlugin: Plugin | undefined\n  const plugin = addTimer<$Prose>(\n    async (ctx) => {\n      await ctx.wait(SchemaReady)\n      prosePlugin = await prose(ctx)\n      ctx.update(prosePluginsCtx, (ps) => [...ps, prosePlugin!])\n\n      return () => {\n        ctx.update(prosePluginsCtx, (ps) => ps.filter((x) => x !== prosePlugin))\n      }\n    },\n    editorStateTimerCtx,\n    timerName\n  )\n\n  plugin.plugin = () => prosePlugin!\n  plugin.key = () => prosePlugin!.spec.key\n\n  return plugin\n}\n","import type { Ctx, MilkdownPlugin } from '@milkdown/ctx'\nimport {\n  SchemaReady,\n  editorStateTimerCtx,\n  prosePluginsCtx,\n} from '@milkdown/core'\nimport { keymap } from '@milkdown/prose/keymap'\nimport type { Command } from '@milkdown/prose/state'\n\nimport { addTimer } from './utils'\n\n/// @internal\nexport type Keymap = Record<string, Command>\n\n/// @internal\nexport type $Shortcut = MilkdownPlugin & {\n  keymap: Keymap\n}\n\n/// Create a shortcut for the editor.\n/// It takes a factory function which returns a [prosemirror keymap](https://prosemirror.net/docs/ref/#keymap).\n///\n/// Additional property:\n/// - `keymap`: The prosemirror keymap created.\nexport function $shortcut(shortcut: (ctx: Ctx) => Keymap): $Shortcut {\n  const plugin: MilkdownPlugin = (ctx) => async () => {\n    await ctx.wait(SchemaReady)\n    const k = shortcut(ctx)\n    const keymapPlugin = keymap(k)\n    ctx.update(prosePluginsCtx, (ps) => [...ps, keymapPlugin])\n    ;(<$Shortcut>plugin).keymap = k\n\n    return () => {\n      ctx.update(prosePluginsCtx, (ps) => ps.filter((x) => x !== keymapPlugin))\n    }\n  }\n\n  return <$Shortcut>plugin\n}\n\n/// The async version for `$shortcut`. You can use `await` in the factory when creating the keymap.\n///\n/// Additional property:\n/// - `keymap`: The prosemirror keymap created.\n/// - `timer`: The timer which will be resolved when the plugin is ready.\nexport function $shortcutAsync(\n  shortcut: (ctx: Ctx) => Promise<Keymap>,\n  timerName?: string\n) {\n  return addTimer<$Shortcut>(\n    async (ctx, plugin) => {\n      await ctx.wait(SchemaReady)\n      const k = await shortcut(ctx)\n      const keymapPlugin = keymap(k)\n      ctx.update(prosePluginsCtx, (ps) => [...ps, keymapPlugin])\n      plugin.keymap = k\n\n      return () => {\n        ctx.update(prosePluginsCtx, (ps) =>\n          ps.filter((x) => x !== keymapPlugin)\n        )\n      }\n    },\n    editorStateTimerCtx,\n    timerName\n  )\n}\n","import type { Ctx, MilkdownPlugin } from '@milkdown/ctx'\nimport {\n  SchemaReady,\n  editorViewTimerCtx,\n  markViewCtx,\n  nodeViewCtx,\n} from '@milkdown/core'\nimport { NodeType } from '@milkdown/prose/model'\nimport type {\n  MarkViewConstructor,\n  NodeViewConstructor,\n} from '@milkdown/prose/view'\n\nimport { addTimer } from './utils'\nimport type { $Mark, $Node } from '.'\n\n/// @internal\nexport type $View<\n  T extends $Node | $Mark,\n  V extends NodeViewConstructor | MarkViewConstructor,\n> = MilkdownPlugin & {\n  view: V\n  type: T\n}\n\n/// @internal\nexport type GetConstructor<T extends $Node | $Mark> = T extends $Node\n  ? NodeViewConstructor\n  : T extends $Mark\n    ? MarkViewConstructor\n    : NodeViewConstructor | MarkViewConstructor\n\n/// Create a [prosemirror node/mark view](https://prosemirror.net/docs/ref/#view.NodeView) plugin.\n/// It takes two arguments\n/// - `type`: The node/mark plugin that needs to add a view.\n/// - `view`: The factory that creates the view. It should return a function that returns a [node/mark view constructor](https://prosemirror.net/docs/ref/#view.NodeView).\n///\n/// Additional property:\n/// - `view`: The view created.\n/// - `type`: The node/mark plugin that needs to add a view.\nexport function $view<\n  T extends $Node | $Mark,\n  V extends NodeViewConstructor | MarkViewConstructor = GetConstructor<T>,\n>(type: T, view: (ctx: Ctx) => V): $View<T, V> {\n  const plugin: MilkdownPlugin = (ctx) => async () => {\n    await ctx.wait(SchemaReady)\n    const v = view(ctx)\n    if (type.type(ctx) instanceof NodeType)\n      ctx.update(nodeViewCtx, (ps) => [\n        ...ps,\n        [type.id, v] as [string, NodeViewConstructor],\n      ])\n    else\n      ctx.update(markViewCtx, (ps) => [\n        ...ps,\n        [type.id, v] as [string, MarkViewConstructor],\n      ])\n    ;(<$View<T, V>>plugin).view = v\n    ;(<$View<T, V>>plugin).type = type\n\n    return () => {\n      if (type.type(ctx) instanceof NodeType)\n        ctx.update(nodeViewCtx, (ps) => ps.filter((x) => x[0] !== type.id))\n      else ctx.update(markViewCtx, (ps) => ps.filter((x) => x[0] !== type.id))\n    }\n  }\n\n  return <$View<T, V>>plugin\n}\n\n/// The async version for `$view`. You can use `await` in the factory when creating the view.\n///\n/// Additional property:\n/// - `view`: The view created.\n/// - `type`: The node/mark plugin that needs to add a view.\n/// - `timer`: The timer which will be resolved when the view is ready.\nexport function $viewAsync<\n  T extends $Node | $Mark,\n  V extends NodeViewConstructor | MarkViewConstructor = GetConstructor<T>,\n>(type: T, view: (ctx: Ctx) => Promise<V>, timerName?: string) {\n  return addTimer<$View<T, V>>(\n    async (ctx, plugin) => {\n      await ctx.wait(SchemaReady)\n      const v = await view(ctx)\n      if (type.type(ctx) instanceof NodeType)\n        ctx.update(nodeViewCtx, (ps) => [\n          ...ps,\n          [type.id, v] as [string, NodeViewConstructor],\n        ])\n      else\n        ctx.update(markViewCtx, (ps) => [\n          ...ps,\n          [type.id, v] as [string, MarkViewConstructor],\n        ])\n\n      plugin.view = v\n      plugin.type = type\n\n      return () => {\n        if (type.type(ctx) instanceof NodeType)\n          ctx.update(nodeViewCtx, (ps) => ps.filter((x) => x[0] !== type.id))\n        else ctx.update(markViewCtx, (ps) => ps.filter((x) => x[0] !== type.id))\n      }\n    },\n    editorViewTimerCtx,\n    timerName\n  )\n}\n","import type { MilkdownPlugin, SliceType } from '@milkdown/ctx'\nimport { createSlice } from '@milkdown/ctx'\n\n/// @internal\nexport type $Ctx<T, N extends string> = MilkdownPlugin & {\n  key: SliceType<T, N>\n}\n\n/// Create a slice plugin. The plugin will be registered in the `ctx` and can be accessed by other parts of the editor.\n/// ```ts\n/// const counterCtx = $ctx(0, 'counter');\n/// ```\n///\n/// Additional property:\n/// - `key`: The key of the slice.\nexport function $ctx<T, N extends string>(value: T, name: N): $Ctx<T, N> {\n  const slice = createSlice(value, name)\n  const plugin: $Ctx<T, N> = (ctx) => {\n    ctx.inject(slice)\n    return () => {\n      return () => {\n        ctx.remove(slice)\n      }\n    }\n  }\n\n  plugin.key = slice\n\n  return plugin\n}\n","import type { Ctx, MilkdownPlugin } from '@milkdown/ctx'\nimport { nodesCtx } from '@milkdown/core'\nimport type { NodeSchema } from '@milkdown/transformer'\nimport type { $Ctx } from '../$ctx'\nimport { $ctx } from '../$ctx'\nimport type { $Node } from '../$node'\nimport { $node } from '../$node'\n\n/// @internal\nexport type GetNodeSchema = (ctx: Ctx) => NodeSchema\n\n/// @internal\nexport type $NodeSchema<T extends string> = [\n  schemaCtx: $Ctx<GetNodeSchema, T>,\n  schema: $Node,\n] & {\n  id: $Node['id']\n  type: $Node['type']\n  node: $Node\n  ctx: $Ctx<GetNodeSchema, T>\n  schema: NodeSchema\n  key: $Ctx<GetNodeSchema, T>['key']\n  extendSchema: (\n    handler: (prev: GetNodeSchema) => GetNodeSchema\n  ) => MilkdownPlugin\n}\n\n/// Create a plugin for node schema.\n/// The first parameter is the id of the node schema.\n/// The second parameter is the function that returns the node schema.\n///\n/// The function will return a plugin with additional properties:\n/// - `id`: The id of the node schema.\n/// - `type`: A function witch will return the type of the node schema.\n/// - `ctx`: The context of the node schema.\n/// - `node`: The node schema plugin.\n/// - `schema`: The node schema.\n/// - `key`: The key of slice which contains the node schema factory.\n/// - `extendSchema`: A function witch will return a plugin that can extend the node schema.\nexport function $nodeSchema<T extends string>(\n  id: T,\n  schema: GetNodeSchema\n): $NodeSchema<T> {\n  const schemaCtx = $ctx(schema, id)\n\n  const nodeSchema = $node(id, (ctx) => {\n    const userSchema = ctx.get(schemaCtx.key)\n    return userSchema(ctx)\n  })\n\n  const result = [schemaCtx, nodeSchema] as $NodeSchema<T>\n  result.id = nodeSchema.id\n  result.node = nodeSchema\n\n  result.type = (ctx: Ctx) => nodeSchema.type(ctx)\n  result.schema = nodeSchema.schema\n  result.ctx = schemaCtx\n  result.key = schemaCtx.key\n  result.extendSchema = (handler): MilkdownPlugin => {\n    return (ctx) => () => {\n      const prev = ctx.get(schemaCtx.key)\n      const next = handler(prev)\n      const nodeSchema = next(ctx)\n      ctx.update(nodesCtx, (ns) => [\n        ...ns.filter((n) => n[0] !== id),\n        [id, nodeSchema] as [string, NodeSchema],\n      ])\n      result.schema = nodeSchema\n    }\n  }\n\n  return result\n}\n","import type { Ctx, MilkdownPlugin } from '@milkdown/ctx'\nimport { marksCtx } from '@milkdown/core'\nimport type { MarkSchema } from '@milkdown/transformer'\nimport type { $Ctx } from '../$ctx'\nimport { $ctx } from '../$ctx'\nimport type { $Mark } from '../$mark'\nimport { $mark } from '../$mark'\n\n/// @internal\nexport type GetMarkSchema = (ctx: Ctx) => MarkSchema\n\n/// @internal\nexport type $MarkSchema<T extends string> = [\n  schemaCtx: $Ctx<GetMarkSchema, T>,\n  schema: $Mark,\n] & {\n  id: $Mark['id']\n  type: $Mark['type']\n  mark: $Mark\n  ctx: $Ctx<GetMarkSchema, T>\n  schema: MarkSchema\n  key: $Ctx<GetMarkSchema, T>['key']\n  extendSchema: (\n    handler: (prev: GetMarkSchema) => GetMarkSchema\n  ) => MilkdownPlugin\n}\n\n/// Create a plugin for mark schema.\n/// The first parameter is the id of the mark schema.\n/// The second parameter is the function that returns the mark schema.\n///\n/// The function will return a plugin with additional properties:\n/// - `id`: The id of the mark schema.\n/// - `type`: A function witch will return the type of the mark schema.\n/// - `ctx`: The context of the mark schema.\n/// - `mark`: The mark schema plugin.\n/// - `schema`: The mark schema.\n/// - `key`: The key of slice which contains the mark schema factory.\n/// - `extendSchema`: A function witch will return a plugin that can extend the mark schema.\nexport function $markSchema<T extends string>(\n  id: T,\n  schema: GetMarkSchema\n): $MarkSchema<T> {\n  const schemaCtx = $ctx(schema, id)\n\n  const markSchema = $mark(id, (ctx) => {\n    const userSchema = ctx.get(schemaCtx.key)\n    return userSchema(ctx)\n  })\n\n  const result = [schemaCtx, markSchema] as $MarkSchema<T>\n  result.id = markSchema.id\n  result.mark = markSchema\n  result.type = markSchema.type\n  result.schema = markSchema.schema\n  result.ctx = schemaCtx\n  result.key = schemaCtx.key\n  result.extendSchema = (handler): MilkdownPlugin => {\n    return (ctx) => () => {\n      const prev = ctx.get(schemaCtx.key)\n      const next = handler(prev)\n      const markSchema = next(ctx)\n      ctx.update(marksCtx, (ms) => [\n        ...ms.filter((m) => m[0] !== id),\n        [id, markSchema] as [string, MarkSchema],\n      ])\n      result.schema = markSchema\n    }\n  }\n\n  return result\n}\n","import type { Ctx, SliceType } from '@milkdown/ctx'\nimport type { Command } from '@milkdown/prose/state'\nimport type { $Ctx } from '../$ctx'\nimport { $ctx } from '../$ctx'\nimport type { $Shortcut, Keymap } from '../$shortcut'\nimport { $shortcut } from '../$shortcut'\n\n/// @internal\nexport type KeymapConfig<K extends string> = Record<K, string | string[]>\n\n/// @internal\nexport interface KeymapItem {\n  shortcuts: string | string[]\n  command: (ctx: Ctx) => Command\n}\n\n/// @internal\nexport type UserKeymapConfig<Key extends string> = Record<Key, KeymapItem>\n\n/// @internal\nexport type $UserKeymap<N extends string, Key extends string> = [\n  $Ctx<KeymapConfig<Key>, `${N}Keymap`>,\n  $Shortcut,\n] & {\n  key: SliceType<KeymapConfig<Key>, `${N}Keymap`>\n  keymap: Keymap\n  ctx: $Ctx<KeymapConfig<Key>, `${N}Keymap`>\n  shortcuts: $Shortcut\n}\n\n/// Create a keymap which can be customized by user.\n/// It takes two arguments:\n/// - `name`: The name of the keymap.\n/// - `userKeymap`: The keymap config which contains the shortcuts and the command.\nexport function $useKeymap<N extends string, Key extends string>(\n  name: N,\n  userKeymap: UserKeymapConfig<Key>\n) {\n  const key = Object.fromEntries(\n    Object.entries<KeymapItem>(userKeymap).map(([key, { shortcuts }]) => {\n      return [key, shortcuts]\n    })\n  ) as Record<Key, string | string[]>\n\n  const keymapDef = $ctx<KeymapConfig<Key>, `${N}Keymap`>(key, `${name}Keymap`)\n\n  const shortcuts = $shortcut((ctx) => {\n    const keys = ctx.get(keymapDef.key)\n\n    const keymapTuple = Object.entries<KeymapItem>(userKeymap).flatMap(\n      ([key, { command }]) => {\n        const targetKeys: string[] = [keys[key as Key]].flat()\n\n        return targetKeys.map((targetKey) => [targetKey, command(ctx)] as const)\n      }\n    )\n\n    return Object.fromEntries(keymapTuple)\n  })\n\n  const result = [keymapDef, shortcuts] as $UserKeymap<N, Key>\n  result.ctx = keymapDef\n  result.shortcuts = shortcuts\n  result.key = keymapDef.key\n  result.keymap = shortcuts.keymap\n\n  return result\n}\n","import type { Mark, Node } from '@milkdown/prose/model'\nimport type { $Ctx } from '../$ctx'\nimport { $ctx } from '../$ctx'\n\n/// @internal\nexport type $NodeAttr = $Ctx<\n  (node: Node) => Record<string, any>,\n  `${string}Attr`\n>\n\n/// Create a slice which contains the attributes for node schema.\nexport const $nodeAttr = (\n  name: string,\n  value: (node: Node) => Record<string, any> = () => ({})\n): $NodeAttr => $ctx(value, `${name}Attr`)\n\n/// @internal\nexport type $MarkAttr = $Ctx<\n  (node: Mark) => Record<string, any>,\n  `${string}Attr`\n>\n\n/// Create a slice which contains the attributes for mark schema.\nexport const $markAttr = (\n  name: string,\n  value: (mark: Mark) => Record<string, any> = () => ({})\n): $MarkAttr => $ctx(value, `${name}Attr`)\n","import type { Ctx, MilkdownPlugin } from '@milkdown/ctx'\nimport { InitReady, remarkPluginsCtx } from '@milkdown/core'\n\nimport type { RemarkPlugin, RemarkPluginRaw } from '@milkdown/transformer'\nimport type { $Ctx } from '../$ctx'\nimport { $ctx } from '../$ctx'\n\n/// @internal\nexport type $Remark<Id extends string, Options> = [\n  optionsCtx: $Ctx<Options, Id>,\n  plugin: MilkdownPlugin,\n] & {\n  id: Id\n  plugin: MilkdownPlugin\n  options: $Ctx<Options, Id>\n}\n\n/// Create a milkdown wrapper for [remark plugin](https://github.com/remarkjs/remark/blob/main/doc/plugins.md).\n/// It takes a factory function which returns a [remark plugin](https://github.com/remarkjs/remark/blob/main/doc/plugins.md).\n///\n/// Additional property:\n/// - `id`: The id of the remark plugin.\n/// - `plugin`: The remark plugin created.\n/// - `options`: The ctx contains the options of the remark plugin.\nexport function $remark<Id extends string, Options>(\n  id: Id,\n  remark: (ctx: Ctx) => RemarkPluginRaw<Options>,\n  initialOptions?: Options\n): $Remark<Id, Options> {\n  const options = $ctx<Options, Id>(initialOptions ?? ({} as Options), id)\n  const plugin: MilkdownPlugin = (ctx) => async () => {\n    await ctx.wait(InitReady)\n    const re = remark(ctx)\n    const remarkPlugin: RemarkPlugin<Options> = {\n      plugin: re,\n      options: ctx.get(options.key),\n    }\n    ctx.update(remarkPluginsCtx, (rp) => [...rp, remarkPlugin as RemarkPlugin])\n\n    return () => {\n      ctx.update(remarkPluginsCtx, (rp) => rp.filter((x) => x !== remarkPlugin))\n    }\n  }\n\n  const result = [options, plugin] as $Remark<Id, Options>\n  result.id = id\n  result.plugin = plugin\n  result.options = options\n\n  return result\n}\n","import type { CmdKey } from '@milkdown/core'\nimport { commandsCtx } from '@milkdown/core'\nimport type { Ctx } from '@milkdown/ctx'\n\ntype InferParams<T> = T extends CmdKey<infer U> ? U : never\n\n/// Call a command. You can pass the command key and the payload to the macro.\nexport function callCommand<T extends CmdKey<any>>(\n  slice: string,\n  payload?: InferParams<T>\n): (ctx: Ctx) => boolean\nexport function callCommand<T>(\n  slice: CmdKey<T>,\n  payload?: T\n): (ctx: Ctx) => boolean\nexport function callCommand(\n  slice: string | CmdKey<any>,\n  payload?: any\n): (ctx: Ctx) => boolean\nexport function callCommand(\n  slice: string | CmdKey<any>,\n  payload?: any\n): (ctx: Ctx) => boolean {\n  return (ctx: Ctx) => {\n    return ctx.get(commandsCtx).call(slice, payload)\n  }\n}\n","import type { Ctx } from '@milkdown/ctx'\nimport { editorViewCtx } from '@milkdown/core'\n\n/// Force update the editor.\nexport function forceUpdate() {\n  return (ctx: Ctx): void => {\n    const view = ctx.get(editorViewCtx)\n    const { tr } = view.state\n\n    const nextTr = Object.assign(Object.create(tr), tr).setTime(Date.now())\n    return view.dispatch(nextTr)\n  }\n}\n","import type { Ctx } from '@milkdown/ctx'\nimport { editorViewCtx, schemaCtx } from '@milkdown/core'\nimport { DOMSerializer } from '@milkdown/prose/model'\n\n/// Get content of the editor as HTML string.\nexport function getHTML() {\n  return (ctx: Ctx): string => {\n    const div = document.createElement('div')\n    const schema = ctx.get(schemaCtx)\n    const view = ctx.get(editorViewCtx)\n    const fragment = DOMSerializer.fromSchema(schema).serializeFragment(\n      view.state.doc.content\n    )\n\n    div.appendChild(fragment)\n\n    return div.innerHTML\n  }\n}\n","import type { Ctx } from '@milkdown/ctx'\nimport { editorViewCtx, serializerCtx } from '@milkdown/core'\n\n/// Get content of the editor as markdown string.\nexport function getMarkdown() {\n  return (ctx: Ctx): string => {\n    const view = ctx.get(editorViewCtx)\n    const serializer = ctx.get(serializerCtx)\n\n    return serializer(view.state.doc)\n  }\n}\n","import type { Ctx } from '@milkdown/ctx'\nimport { editorViewCtx, parserCtx } from '@milkdown/core'\nimport { Slice } from '@milkdown/prose/model'\n\n/// Insert markdown string into the editor.\nexport function insert(markdown: string) {\n  return (ctx: Ctx) => {\n    const view = ctx.get(editorViewCtx)\n    const parser = ctx.get(parserCtx)\n    const doc = parser(markdown)\n    if (!doc) return\n\n    const contentSlice = view.state.selection.content()\n    return view.dispatch(\n      view.state.tr\n        .replaceSelection(\n          new Slice(doc.content, contentSlice.openStart, contentSlice.openEnd)\n        )\n        .scrollIntoView()\n    )\n  }\n}\n","import type { Ctx } from '@milkdown/ctx'\nimport { editorViewCtx } from '@milkdown/core'\n\n/// Get outline of the editor.\nexport function outline() {\n  return (ctx: Ctx): Array<{ text: string; level: number; id: string }> => {\n    const view = ctx.get(editorViewCtx)\n    const data: { text: string; level: number; id: string }[] = []\n    const doc = view.state.doc\n    doc.descendants((node) => {\n      if (node.type.name === 'heading' && node.attrs.level)\n        data.push({\n          text: node.textContent,\n          level: node.attrs.level,\n          id: node.attrs.id,\n        })\n    })\n    return data\n  }\n}\n","import type { Ctx } from '@milkdown/ctx'\nimport {\n  editorStateOptionsCtx,\n  editorViewCtx,\n  parserCtx,\n  prosePluginsCtx,\n  schemaCtx,\n} from '@milkdown/core'\nimport { Slice } from '@milkdown/prose/model'\nimport { EditorState } from '@milkdown/prose/state'\n\n/// Replace all content of the editor with markdown string.\n/// If flush is true, the editor state will be re-created.\nexport function replaceAll(markdown: string, flush = false) {\n  return (ctx: Ctx): void => {\n    const view = ctx.get(editorViewCtx)\n    const parser = ctx.get(parserCtx)\n    const doc = parser(markdown)\n    if (!doc) return\n\n    if (!flush) {\n      const { state } = view\n      return view.dispatch(\n        state.tr.replace(\n          0,\n          state.doc.content.size,\n          new Slice(doc.content, 0, 0)\n        )\n      )\n    }\n\n    const schema = ctx.get(schemaCtx)\n    const options = ctx.get(editorStateOptionsCtx)\n    const plugins = ctx.get(prosePluginsCtx)\n\n    const state = EditorState.create({\n      schema,\n      doc,\n      plugins,\n      ...options,\n    })\n\n    view.updateState(state)\n  }\n}\n","import type { Ctx } from '@milkdown/ctx'\nimport { editorViewCtx } from '@milkdown/core'\nimport type { Attrs } from '@milkdown/prose/model'\n\n/// Set the attributes of the node at the given position.\nexport function setAttr(pos: number, update: (prevAttrs: Attrs) => Attrs) {\n  return (ctx: Ctx) => {\n    const view = ctx.get(editorViewCtx)\n    const { tr } = view.state\n    const node = tr.doc.nodeAt(pos)\n    if (!node) return\n    const nextAttr = update(node.attrs)\n    return view.dispatch(tr.setNodeMarkup(pos, undefined, nextAttr))\n  }\n}\n","/// @internal\nexport type Many<T> = T | ReadonlyArray<T>\n\ninterface Pipe {\n  pipe: (<A extends any[], R1, R2, R3, R4, R5, R6, R7>(\n    f1: (...args: A) => R1,\n    f2: (a: R1) => R2,\n    f3: (a: R2) => R3,\n    f4: (a: R3) => R4,\n    f5: (a: R4) => R5,\n    f6: (a: R5) => R6,\n    f7: (a: R6) => R7\n  ) => (...args: A) => R7) &\n    (<A extends any[], R1, R2, R3, R4, R5, R6, R7>(\n      f1: (...args: A) => R1,\n      f2: (a: R1) => R2,\n      f3: (a: R2) => R3,\n      f4: (a: R3) => R4,\n      f5: (a: R4) => R5,\n      f6: (a: R5) => R6,\n      f7: (a: R6) => R7,\n      ...func: Array<Many<(a: any) => any>>\n    ) => (...args: A) => any) &\n    (<A extends any[], R1, R2, R3, R4, R5, R6>(\n      f1: (...args: A) => R1,\n      f2: (a: R1) => R2,\n      f3: (a: R2) => R3,\n      f4: (a: R3) => R4,\n      f5: (a: R4) => R5,\n      f6: (a: R5) => R6\n    ) => (...args: A) => R6) &\n    (<A extends any[], R1, R2, R3, R4, R5>(\n      f1: (...args: A) => R1,\n      f2: (a: R1) => R2,\n      f3: (a: R2) => R3,\n      f4: (a: R3) => R4,\n      f5: (a: R4) => R5\n    ) => (...args: A) => R5) &\n    (<A extends any[], R1, R2, R3, R4>(\n      f1: (...args: A) => R1,\n      f2: (a: R1) => R2,\n      f3: (a: R2) => R3,\n      f4: (a: R3) => R4\n    ) => (...args: A) => R4) &\n    (<A extends any[], R1, R2, R3>(\n      f1: (...args: A) => R1,\n      f2: (a: R1) => R2,\n      f3: (a: R2) => R3\n    ) => (...args: A) => R3) &\n    (<A extends any[], R1, R2>(\n      f1: (...args: A) => R1,\n      f2: (a: R1) => R2\n    ) => (...args: A) => R2) &\n    ((...func: Array<Many<(...args: any[]) => any>>) => (...args: any[]) => any)\n}\n\n/// @internal\nexport const pipe: Pipe['pipe'] = (...funcs: any[]) => {\n  const length = funcs.length\n  let index = length\n  while (index--) {\n    if (typeof funcs[index] !== 'function')\n      throw new TypeError('Expected a function')\n  }\n  return (...args: any[]) => {\n    let index = 0\n    let result = length ? funcs[index](...args) : args[0]\n    while (++index < length) result = funcs[index](result)\n\n    return result\n  }\n}\n"],"names":["nanoid","customAlphabet","addTimer","runner","injectTo","timerName","timer","createTimer","doneCalled","plugin","ctx","x","cleanup","y","$command","key","cmd","cmdKey","createCmdKey","CommandsReady","command","commandsCtx","payload","$commandAsync","commandsTimerCtx","$inputRule","inputRule","SchemaReady","ir","inputRulesCtx","irs","$inputRuleAsync","editorStateTimerCtx","$mark","id","schema","markSchema","marksCtx","ns","n","markType","schemaCtx","missingMarkInSchema","$markAsync","done","schemaTimerCtx","$node","nodeSchema","nodesCtx","nodeType","missingNodeInSchema","$nodeAsync","$prose","prose","prosePlugin","prosePluginsCtx","ps","$proseAsync","$shortcut","shortcut","k","keymapPlugin","keymap","$shortcutAsync","$view","type","view","v","NodeType","nodeViewCtx","markViewCtx","$viewAsync","editorViewTimerCtx","$ctx","value","name","slice","createSlice","$nodeSchema","result","handler","prev","$markSchema","ms","m","$useKeymap","userKeymap","shortcuts","keymapDef","keys","keymapTuple","targetKey","$nodeAttr","$markAttr","$remark","remark","initialOptions","options","InitReady","remarkPlugin","remarkPluginsCtx","rp","callCommand","forceUpdate","editorViewCtx","tr","nextTr","getHTML","div","fragment","DOMSerializer","getMarkdown","serializerCtx","insert","markdown","doc","parserCtx","contentSlice","Slice","outline","data","node","replaceAll","flush","state","editorStateOptionsCtx","plugins","EditorState","setAttr","pos","update","nextAttr","pipe","funcs","length","index","args"],"mappings":"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"}