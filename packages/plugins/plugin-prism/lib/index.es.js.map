{"version":3,"file":"index.es.js","sources":["../src/get-decorations.ts","../src/index.ts"],"sourcesContent":["import { findChildren } from '@milkdown/prose'\nimport type { Node } from '@milkdown/prose/model'\nimport { Decoration, DecorationSet } from '@milkdown/prose/view'\nimport type { RefractorElement, Text } from 'refractor/lib/common'\nimport type { Refractor } from 'refractor/lib/core'\n\nexport interface FlattedNode {\n  text: string\n  className: string[]\n}\n\ntype RefractorNode = RefractorElement | Text\n\nfunction flatNodes(nodes: RefractorNode[], className: string[] = []) {\n  return nodes.flatMap((node): FlattedNode[] =>\n    node.type === 'element'\n      ? flatNodes(node.children, [\n          ...className,\n          ...((node.properties?.className as string[]) || []),\n        ])\n      : [{ text: node.value, className }]\n  )\n}\n\nexport function getDecorations(doc: Node, name: string, refractor: Refractor) {\n  const { highlight, listLanguages } = refractor\n  const allLanguages = listLanguages()\n  const decorations: Decoration[] = []\n\n  findChildren((node) => node.type.name === name)(doc).forEach((block) => {\n    let from = block.pos + 1\n    const { language } = block.node.attrs\n    if (!language || !allLanguages.includes(language)) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        'Unsupported language detected, this language has not been supported by current prism config: ',\n        language\n      )\n      return\n    }\n    const nodes = highlight(block.node.textContent, language)\n\n    flatNodes(nodes.children).forEach((node) => {\n      const to = from + node.text.length\n\n      if (node.className.length) {\n        const decoration = Decoration.inline(from, to, {\n          class: node.className.join(' '),\n        })\n\n        decorations.push(decoration)\n      }\n\n      from = to\n    })\n  })\n\n  return DecorationSet.create(doc, decorations)\n}\n","import type { Refractor } from 'refractor/lib/core'\n\nimport { findChildren } from '@milkdown/prose'\nimport { Plugin, PluginKey } from '@milkdown/prose/state'\nimport { refractor } from 'refractor'\n\nimport { $ctx, $prose } from '@milkdown/utils'\nimport type { MilkdownPlugin } from '@milkdown/ctx'\nimport { getDecorations } from './get-decorations'\n\n/// @internal\nexport interface Options {\n  configureRefractor: (refractor: Refractor) => void | Refractor\n}\n\n/// Config for prism.\n/// You can configure refractor here.\nexport const prismConfig = $ctx<Options, 'prismConfig'>(\n  {\n    configureRefractor: () => {},\n  },\n  'prismConfig'\n)\n\nprismConfig.meta = {\n  package: '@milkdown/plugin-prism',\n  displayName: 'Ctx<prism>',\n}\n\n/// The prism prosemirror plugin.\nexport const prismPlugin = $prose((ctx) => {\n  const { configureRefractor } = ctx.get(prismConfig.key)\n  const name = 'code_block'\n  return new Plugin({\n    key: new PluginKey('MILKDOWN_PRISM'),\n    state: {\n      init: (_, { doc }) => {\n        const result = configureRefractor(refractor)\n        return getDecorations(doc, name, result ?? refractor)\n      },\n      apply: (transaction, decorationSet, oldState, state) => {\n        const isNodeName = state.selection.$head.parent.type.name === name\n        const isPreviousNodeName =\n          oldState.selection.$head.parent.type.name === name\n        const oldNode = findChildren((node) => node.type.name === name)(\n          oldState.doc\n        )\n        const newNode = findChildren((node) => node.type.name === name)(\n          state.doc\n        )\n        const codeBlockChanged =\n          transaction.docChanged &&\n          (isNodeName ||\n            isPreviousNodeName ||\n            oldNode.length !== newNode.length ||\n            oldNode[0]?.node.attrs.language !==\n              newNode[0]?.node.attrs.language ||\n            transaction.steps.some((step) => {\n              const s = step as unknown as { from: number; to: number }\n              return (\n                s.from !== undefined &&\n                s.to !== undefined &&\n                oldNode.some((node) => {\n                  return (\n                    node.pos >= s.from && node.pos + node.node.nodeSize <= s.to\n                  )\n                })\n              )\n            }))\n\n        if (codeBlockChanged)\n          return getDecorations(transaction.doc, name, refractor)\n\n        return decorationSet.map(transaction.mapping, transaction.doc)\n      },\n    },\n    props: {\n      decorations(this: Plugin, state) {\n        return this.getState(state)\n      },\n    },\n  })\n})\n\nprismPlugin.meta = {\n  package: '@milkdown/plugin-prism',\n  displayName: 'Prose<prism>',\n}\n\n/// All plugins exported by this package.\nexport const prism: MilkdownPlugin[] = [prismPlugin, prismConfig]\n"],"names":["flatNodes","nodes","className","node","_a","getDecorations","doc","name","refractor","highlight","listLanguages","allLanguages","decorations","findChildren","block","from","language","to","decoration","Decoration","DecorationSet","prismConfig","$ctx","prismPlugin","$prose","ctx","configureRefractor","Plugin","PluginKey","_","result","transaction","decorationSet","oldState","state","isNodeName","isPreviousNodeName","oldNode","newNode","_b","step","s","prism"],"mappings":"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"}