{"version":3,"file":"index.es.js","sources":["../src/__internal__/with-meta.ts","../src/block-config.ts","../src/__internal__/select-node-by-dom.ts","../src/__internal__/serialize-for-clipboard.ts","../src/block-service.ts","../src/block-plugin.ts","../src/block-provider.ts","../src/index.ts"],"sourcesContent":["import type { Meta, MilkdownPlugin } from '@milkdown/ctx'\n\nexport function withMeta<T extends MilkdownPlugin>(\n  plugin: T,\n  meta: Partial<Meta> & Pick<Meta, 'displayName'>\n): T {\n  Object.assign(plugin, {\n    meta: {\n      package: '@milkdown/plugin-block',\n      ...meta,\n    },\n  })\n\n  return plugin\n}\n","import type { Node, ResolvedPos } from '@milkdown/prose/model'\nimport { $ctx } from '@milkdown/utils'\n\nimport { findParent } from '@milkdown/prose'\nimport { withMeta } from './__internal__/with-meta'\n\n/// @internal\nexport type FilterNodes = (pos: ResolvedPos, node: Node) => boolean\n\n/// @internal\nexport const defaultNodeFilter: FilterNodes = (pos) => {\n  const table = findParent((node) => node.type.name === 'table')(pos)\n  if (table) return false\n\n  return true\n}\n\n/// A slice contains the block config.\n/// Possible properties:\n/// - `filterNodes`: A function to filter nodes that can be dragged.\nexport const blockConfig = $ctx<{ filterNodes: FilterNodes }, 'blockConfig'>(\n  { filterNodes: defaultNodeFilter },\n  'blockConfig'\n)\n\nwithMeta(blockConfig, {\n  displayName: 'Ctx<blockConfig>',\n})\n","import type { EditorView } from '@milkdown/prose/view'\n\nimport type { FilterNodes } from '../block-config'\nimport type { ActiveNode } from '../types'\n\nexport function selectRootNodeByDom(\n  view: EditorView,\n  coords: { x: number; y: number },\n  filterNodes: FilterNodes\n): ActiveNode | null {\n  const root = view.dom.parentElement\n  if (!root) return null\n\n  try {\n    const pos = view.posAtCoords({\n      left: coords.x,\n      top: coords.y,\n    })?.inside\n    if (pos == null || pos < 0) return null\n\n    let $pos = view.state.doc.resolve(pos)\n    let node = view.state.doc.nodeAt(pos)\n    let element = view.nodeDOM(pos) as HTMLElement | null\n\n    const filter = (needLookup: boolean) => {\n      const checkDepth = $pos.depth >= 1 && $pos.index($pos.depth) === 0\n      const shouldLookUp = needLookup || checkDepth\n\n      if (!shouldLookUp) return\n\n      const ancestorPos = $pos.before($pos.depth)\n      node = view.state.doc.nodeAt(ancestorPos)\n      element = view.nodeDOM(ancestorPos) as HTMLElement | null\n      $pos = view.state.doc.resolve(ancestorPos)\n\n      if (!filterNodes($pos, node!)) filter(true)\n    }\n\n    // If filterNodes returns false, we should look up the parent node.\n    const filterResult = filterNodes($pos, node!)\n    filter(!filterResult)\n\n    if (!element || !node) return null\n\n    return { node, $pos, el: element }\n  } catch {\n    return null\n  }\n}\n","/**\n * Copy pasted from https://github.com/ProseMirror/prosemirror-view/blob/master/src/clipboard.ts\n */\n\nimport type { NodeType, Slice } from '@milkdown/prose/model'\nimport { DOMSerializer } from '@milkdown/prose/model'\nimport type { EditorView } from '@milkdown/prose/view'\n\nlet _detachedDoc: Document | null = null\nfunction detachedDoc() {\n  return (\n    _detachedDoc ||\n    (_detachedDoc = document.implementation.createHTMLDocument('title'))\n  )\n}\n\nconst wrapMap: { [node: string]: string[] } = {\n  thead: ['table'],\n  tbody: ['table'],\n  tfoot: ['table'],\n  caption: ['table'],\n  colgroup: ['table'],\n  col: ['table', 'colgroup'],\n  tr: ['table', 'tbody'],\n  td: ['table', 'tbody', 'tr'],\n  th: ['table', 'tbody', 'tr'],\n}\n\nexport function serializeForClipboard(view: EditorView, slice: Slice) {\n  const context = []\n  let { openStart, openEnd, content } = slice\n  while (\n    openStart > 1 &&\n    openEnd > 1 &&\n    content.childCount === 1 &&\n    content.firstChild!.childCount === 1\n  ) {\n    openStart -= 1\n    openEnd -= 1\n    const node = content.firstChild!\n    context.push(\n      node.type.name,\n      node.attrs !==\n        (node.type as NodeType & { defaultAttrs: unknown }).defaultAttrs\n        ? node.attrs\n        : null\n    )\n    content = node.content\n  }\n\n  const serializer =\n    view.someProp('clipboardSerializer') ||\n    DOMSerializer.fromSchema(view.state.schema)\n  const doc = detachedDoc()\n  const wrap = doc.createElement('div')\n  wrap.appendChild(serializer.serializeFragment(content, { document: doc }))\n\n  let firstChild = wrap.firstChild\n  let needsWrap\n  let wrappers = 0\n  while (\n    firstChild &&\n    firstChild.nodeType === 1 &&\n    (needsWrap = wrapMap[firstChild.nodeName.toLowerCase()])\n  ) {\n    for (let i = needsWrap.length - 1; i >= 0; i--) {\n      const wrapper = doc.createElement(needsWrap[i] as string)\n      while (wrap.firstChild) wrapper.appendChild(wrap.firstChild)\n      wrap.appendChild(wrapper)\n      wrappers++\n    }\n    firstChild = wrap.firstChild\n  }\n\n  if (firstChild && firstChild.nodeType === 1) {\n    ;(firstChild as HTMLElement).setAttribute(\n      'data-pm-slice',\n      `${openStart} ${openEnd}${wrappers ? ` -${wrappers}` : ''} ${JSON.stringify(context)}`\n    )\n  }\n\n  const text =\n    view.someProp('clipboardTextSerializer', (f) => f(slice, view)) ||\n    slice.content.textBetween(0, slice.content.size, '\\n\\n')\n\n  return { dom: wrap, text }\n}\n","import type { Ctx } from '@milkdown/ctx'\nimport { editorViewCtx } from '@milkdown/core'\nimport { browser } from '@milkdown/prose'\nimport type { Selection } from '@milkdown/prose/state'\nimport { NodeSelection } from '@milkdown/prose/state'\nimport type { EditorView } from '@milkdown/prose/view'\nimport throttle from 'lodash.throttle'\n\nimport type { FilterNodes } from './block-config'\nimport { blockConfig } from './block-config'\nimport { selectRootNodeByDom } from './__internal__/select-node-by-dom'\nimport { serializeForClipboard } from './__internal__/serialize-for-clipboard'\nimport type { ActiveNode } from './types'\n\nconst brokenClipboardAPI =\n  (browser.ie && <number>browser.ie_version < 15) ||\n  (browser.ios && browser.webkit_version < 604)\n\nconst buffer = 20\n\n/// @internal\nexport type BlockServiceMessageType =\n  | {\n      type: 'hide'\n    }\n  | {\n      type: 'show'\n      active: ActiveNode\n    }\n\n/// @internal\nexport type BlockServiceMessage = (message: BlockServiceMessageType) => void\n\n/// @internal\n/// The block service, provide events and methods for block plugin.\n/// Generally you don't need to use this class directly.\nexport class BlockService {\n  /// @internal\n  #ctx?: Ctx\n\n  /// @internal\n  #createSelection: () => null | Selection = () => {\n    if (!this.#active) return null\n    const result = this.#active\n    const view = this.#view\n\n    if (view && NodeSelection.isSelectable(result.node)) {\n      const nodeSelection = NodeSelection.create(\n        view.state.doc,\n        result.$pos.pos\n      )\n      view.dispatch(view.state.tr.setSelection(nodeSelection))\n      view.focus()\n      this.#activeSelection = nodeSelection\n      return nodeSelection\n    }\n    return null\n  }\n\n  /// @internal\n  #activeSelection: null | Selection = null\n  /// @internal\n  #active: null | ActiveNode = null\n  /// @internal\n  #activeDOMRect: undefined | DOMRect = undefined\n\n  /// @internal\n  #dragging = false\n\n  /// @internal\n  get #filterNodes(): FilterNodes | undefined {\n    return this.#ctx?.get(blockConfig.key).filterNodes\n  }\n\n  /// @internal\n  get #view() {\n    return this.#ctx?.get(editorViewCtx)\n  }\n\n  /// @internal\n  #notify?: BlockServiceMessage\n\n  /// @internal\n  #hide = () => {\n    this.#notify?.({ type: 'hide' })\n    this.#active = null\n  }\n\n  /// @internal\n  #show = (active: ActiveNode) => {\n    this.#active = active\n    this.#notify?.({ type: 'show', active })\n  }\n\n  /// Bind editor context and notify function to the service.\n  bind = (ctx: Ctx, notify: BlockServiceMessage) => {\n    this.#ctx = ctx\n    this.#notify = notify\n  }\n\n  /// Add mouse event to the dom.\n  addEvent = (dom: HTMLElement) => {\n    dom.addEventListener('mousedown', this.#handleMouseDown)\n    dom.addEventListener('mouseup', this.#handleMouseUp)\n    dom.addEventListener('dragstart', this.#handleDragStart)\n  }\n\n  /// Remove mouse event to the dom.\n  removeEvent = (dom: HTMLElement) => {\n    dom.removeEventListener('mousedown', this.#handleMouseDown)\n    dom.removeEventListener('mouseup', this.#handleMouseUp)\n    dom.removeEventListener('dragstart', this.#handleDragStart)\n  }\n\n  /// Unbind the notify function.\n  unBind = () => {\n    this.#notify = undefined\n  }\n\n  /// @internal\n  #handleMouseDown = () => {\n    this.#activeDOMRect = this.#active?.el.getBoundingClientRect()\n    this.#createSelection()\n  }\n\n  /// @internal\n  #handleMouseUp = () => {\n    if (!this.#dragging) {\n      requestAnimationFrame(() => {\n        if (!this.#activeDOMRect) return\n        this.#view?.focus()\n      })\n\n      return\n    }\n    this.#dragging = false\n    this.#activeSelection = null\n  }\n\n  /// @internal\n  #handleDragStart = (event: DragEvent) => {\n    this.#dragging = true\n\n    const view = this.#view\n    if (!view) return\n    view.dom.dataset.dragging = 'true'\n\n    const selection = this.#activeSelection\n    if (event.dataTransfer && selection) {\n      const slice = selection.content()\n      event.dataTransfer.effectAllowed = 'copyMove'\n      const { dom, text } = serializeForClipboard(view, slice)\n      event.dataTransfer.clearData()\n      event.dataTransfer.setData(\n        brokenClipboardAPI ? 'Text' : 'text/html',\n        dom.innerHTML\n      )\n      if (!brokenClipboardAPI) event.dataTransfer.setData('text/plain', text)\n      const activeEl = this.#active?.el\n      if (activeEl) event.dataTransfer.setDragImage(activeEl, 0, 0)\n\n      view.dragging = {\n        slice,\n        move: true,\n      }\n    }\n  }\n\n  /// @internal\n  keydownCallback = (view: EditorView) => {\n    this.#hide()\n\n    this.#dragging = false\n    view.dom.dataset.dragging = 'false'\n    return false\n  }\n\n  /// @internal\n  #mousemoveCallback = throttle((view: EditorView, event: MouseEvent) => {\n    if (!view.editable) return\n\n    const rect = view.dom.getBoundingClientRect()\n    const x = rect.left + rect.width / 2\n    const dom = view.root.elementFromPoint(x, event.clientY)\n    if (!(dom instanceof Element)) {\n      this.#hide()\n      return\n    }\n\n    const filterNodes = this.#filterNodes\n    if (!filterNodes) return\n\n    const result = selectRootNodeByDom(\n      view,\n      { x, y: event.clientY },\n      filterNodes\n    )\n\n    if (!result) {\n      this.#hide()\n      return\n    }\n    this.#show(result)\n  }, 200)\n\n  /// @internal\n  mousemoveCallback = (view: EditorView, event: MouseEvent) => {\n    if (view.composing || !view.editable) return false\n\n    this.#mousemoveCallback(view, event)\n\n    return false\n  }\n\n  /// @internal\n  dragoverCallback = (view: EditorView, event: DragEvent) => {\n    if (this.#dragging) {\n      const root = this.#view?.dom.parentElement\n      if (!root) return false\n\n      const hasHorizontalScrollbar = root.scrollHeight > root.clientHeight\n\n      const rootRect = root.getBoundingClientRect()\n      if (hasHorizontalScrollbar) {\n        if (root.scrollTop > 0 && Math.abs(event.y - rootRect.y) < buffer) {\n          const top = root.scrollTop > 10 ? root.scrollTop - 10 : 0\n          root.scrollTop = top\n          return false\n        }\n        const totalHeight = Math.round(view.dom.getBoundingClientRect().height)\n        const scrollBottom = Math.round(root.scrollTop + rootRect.height)\n        if (\n          scrollBottom < totalHeight &&\n          Math.abs(event.y - (rootRect.height + rootRect.y)) < buffer\n        ) {\n          const top = root.scrollTop + 10\n          root.scrollTop = top\n          return false\n        }\n      }\n    }\n    return false\n  }\n\n  /// @internal\n  dragenterCallback = (view: EditorView) => {\n    if (!view.dragging) return\n\n    this.#dragging = true\n    view.dom.dataset.dragging = 'true'\n  }\n\n  /// @internal\n  dragleaveCallback = (view: EditorView, event: DragEvent) => {\n    const x = event.clientX\n    const y = event.clientY\n    // if cursor out of the editor\n    if (x < 0 || y < 0 || x > window.innerWidth || y > window.innerHeight) {\n      this.#active = null\n      this.#dragEnd(view)\n    }\n  }\n\n  /// @internal\n  dropCallback = (view: EditorView) => {\n    this.#dragEnd(view)\n\n    return false\n  }\n\n  /// @internal\n  dragendCallback = (view: EditorView) => {\n    this.#dragEnd(view)\n  }\n\n  /// @internal\n  #dragEnd = (view: EditorView) => {\n    this.#dragging = false\n    view.dom.dataset.dragging = 'false'\n  }\n}\n","import type { PluginSpec } from '@milkdown/prose/state'\nimport { Plugin, PluginKey } from '@milkdown/prose/state'\nimport { $ctx, $prose } from '@milkdown/utils'\n\nimport { BlockService } from './block-service'\nimport { withMeta } from './__internal__/with-meta'\nimport { blockConfig } from './block-config'\n\n/// @internal\nexport const blockService = $ctx(new BlockService(), 'blockService')\n\nwithMeta(blockConfig, {\n  displayName: 'Ctx<blockService>',\n})\n\n/// A slice contains a factory that will return a plugin spec.\n/// Users can use this slice to customize the plugin.\nexport const blockSpec = $ctx<PluginSpec<any>, 'blockSpec'>({}, 'blockSpec')\n\nwithMeta(blockConfig, {\n  displayName: 'Ctx<blockSpec>',\n})\n\n/// The block prosemirror plugin.\nexport const blockPlugin = $prose((ctx) => {\n  const milkdownPluginBlockKey = new PluginKey('MILKDOWN_BLOCK')\n  const service = ctx.get(blockService.key)\n  const spec = ctx.get(blockSpec.key)\n\n  return new Plugin({\n    key: milkdownPluginBlockKey,\n    ...spec,\n    props: {\n      ...spec.props,\n      handleDOMEvents: {\n        drop: (view) => {\n          return service.dropCallback(view)\n        },\n        pointermove: (view, event) => {\n          return service.mousemoveCallback(view, event)\n        },\n        keydown: (view) => {\n          return service.keydownCallback(view)\n        },\n        dragover: (view, event) => {\n          return service.dragoverCallback(view, event)\n        },\n        dragleave: (view, event) => {\n          return service.dragleaveCallback(view, event)\n        },\n        dragenter: (view) => {\n          return service.dragenterCallback(view)\n        },\n        dragend: (view) => {\n          return service.dragendCallback(view)\n        },\n      },\n    },\n  })\n})\n\nwithMeta(blockPlugin, {\n  displayName: 'Prose<block>',\n})\n","import type { Ctx } from '@milkdown/ctx'\nimport type { EditorState } from '@milkdown/prose/state'\nimport type { EditorView } from '@milkdown/prose/view'\n\nimport type {\n  ComputePositionConfig,\n  Middleware,\n  Placement,\n  VirtualElement,\n} from '@floating-ui/dom'\nimport { computePosition, flip, offset } from '@floating-ui/dom'\n\nimport { editorViewCtx } from '@milkdown/core'\nimport type { BlockService } from './block-service'\nimport { blockService } from './block-plugin'\nimport type { ActiveNode } from './types'\n\n/// The context of the block provider.\nexport interface DeriveContext {\n  ctx: Ctx\n  active: ActiveNode\n  editorDom: HTMLElement\n  blockDom: HTMLElement\n}\n\n/// Options for creating block provider.\nexport interface BlockProviderOptions {\n  /// The context of the editor.\n  ctx: Ctx\n  /// The content of the block.\n  content: HTMLElement\n  /// The function to determine whether the tooltip should be shown.\n  shouldShow?: (view: EditorView, prevState?: EditorState) => boolean\n  /// The offset to get the block. Default is 0.\n  getOffset?: (deriveContext: DeriveContext) =>\n    | number\n    | {\n        mainAxis?: number\n        crossAxis?: number\n        alignmentAxis?: number | null\n      }\n  /// The function to get the position of the block. Default is the position of the active node.\n  getPosition?: (deriveContext: DeriveContext) => Omit<DOMRect, 'toJSON'>\n  /// The function to get the placement of the block. Default is 'left'.\n  getPlacement?: (deriveContext: DeriveContext) => Placement\n  /// Other middlewares for floating ui. This will be added after the internal middlewares.\n  middleware?: Middleware[]\n  /// Options for floating ui. If you pass `middleware` or `placement`, it will override the internal settings.\n  floatingUIOptions?: Partial<ComputePositionConfig>\n}\n\n/// A provider for creating block.\nexport class BlockProvider {\n  /// @internal\n  readonly #element: HTMLElement\n\n  /// @internal\n  readonly #ctx: Ctx\n\n  /// @internal\n  #service?: BlockService\n\n  /// @internal\n  #activeNode: ActiveNode | null = null\n\n  /// @internal\n  #initialized = false\n\n  /// @internal\n  readonly #middleware: Middleware[]\n\n  /// @internal\n  readonly #floatingUIOptions: Partial<ComputePositionConfig>\n\n  /// @internal\n  readonly #getOffset?: (deriveContext: DeriveContext) =>\n    | number\n    | {\n        mainAxis?: number\n        crossAxis?: number\n        alignmentAxis?: number | null\n      }\n\n  /// @internal\n  readonly #getPosition?: (\n    deriveContext: DeriveContext\n  ) => Omit<DOMRect, 'toJSON'>\n\n  /// @internal\n  readonly #getPlacement?: (deriveContext: DeriveContext) => Placement\n\n  /// The context of current active node.\n  get active() {\n    return this.#activeNode\n  }\n\n  constructor(options: BlockProviderOptions) {\n    this.#ctx = options.ctx\n    this.#element = options.content\n    this.#getOffset = options.getOffset\n    this.#getPosition = options.getPosition\n    this.#getPlacement = options.getPlacement\n    this.#middleware = options.middleware ?? []\n    this.#floatingUIOptions = options.floatingUIOptions ?? {}\n    this.hide()\n  }\n\n  /// @internal\n  #init() {\n    const view = this.#ctx.get(editorViewCtx)\n    view.dom.parentElement?.appendChild(this.#element)\n\n    const service = this.#ctx.get(blockService.key)\n    service.bind(this.#ctx, (message) => {\n      if (message.type === 'hide') {\n        this.hide()\n        this.#activeNode = null\n      } else if (message.type === 'show') {\n        this.show(message.active)\n        this.#activeNode = message.active\n      }\n    })\n\n    this.#service = service\n    this.#service.addEvent(this.#element)\n    this.#element.draggable = true\n  }\n\n  /// Update provider state by editor view.\n  update = (): void => {\n    requestAnimationFrame(() => {\n      if (!this.#initialized) {\n        try {\n          this.#init()\n          this.#initialized = true\n        } catch {\n          // ignore\n        }\n      }\n    })\n  }\n\n  /// Destroy the block.\n  destroy = () => {\n    this.#service?.unBind()\n    this.#service?.removeEvent(this.#element)\n    this.#element.remove()\n  }\n\n  /// Show the block.\n  show = (active: ActiveNode) => {\n    const dom = active.el\n    const editorDom = this.#ctx.get(editorViewCtx).dom\n    const deriveContext: DeriveContext = {\n      ctx: this.#ctx,\n      active,\n      editorDom,\n      blockDom: this.#element,\n    }\n    const virtualEl: VirtualElement = {\n      contextElement: dom,\n      getBoundingClientRect: () => {\n        if (this.#getPosition) return this.#getPosition(deriveContext)\n\n        return dom.getBoundingClientRect()\n      },\n    }\n    const middleware = [flip()]\n    if (this.#getOffset) {\n      const offsetOption = this.#getOffset(deriveContext)\n      const offsetExt = offset(offsetOption)\n      middleware.push(offsetExt)\n    }\n\n    computePosition(virtualEl, this.#element, {\n      placement: this.#getPlacement\n        ? this.#getPlacement(deriveContext)\n        : 'left',\n      middleware: [...middleware, ...this.#middleware],\n      ...this.#floatingUIOptions,\n    }).then(({ x, y }) => {\n      Object.assign(this.#element.style, {\n        left: `${x}px`,\n        top: `${y}px`,\n      })\n      this.#element.dataset.show = 'true'\n    })\n  }\n\n  /// Hide the block.\n  hide = () => {\n    this.#element.dataset.show = 'false'\n  }\n}\n","import type { SliceType } from '@milkdown/ctx'\nimport type { PluginSpec } from '@milkdown/prose/state'\nimport type { $Ctx, $Prose } from '@milkdown/utils'\nimport type { FilterNodes } from './block-config'\nimport { blockConfig } from './block-config'\nimport { blockPlugin, blockService, blockSpec } from './block-plugin'\nimport type { BlockService } from './block-service'\n\nexport * from './block-plugin'\nexport * from './block-provider'\nexport * from './block-service'\nexport * from './block-config'\nexport * from './types'\n\n/// @internal\nexport type BlockPlugin = [\n  $Ctx<PluginSpec<any>, 'blockSpec'>,\n  $Ctx<{ filterNodes: FilterNodes }, 'blockConfig'>,\n  $Ctx<BlockService, 'blockService'>,\n  $Prose,\n] & {\n  key: SliceType<PluginSpec<any>, 'blockSpec'>\n  pluginKey: $Prose['key']\n}\n\n/// All plugins exported by this package.\nexport const block = [\n  blockSpec,\n  blockConfig,\n  blockService,\n  blockPlugin,\n] as BlockPlugin\nblock.key = blockSpec.key\nblock.pluginKey = blockPlugin.key\n"],"names":["withMeta","plugin","meta","defaultNodeFilter","pos","findParent","node","blockConfig","$ctx","selectRootNodeByDom","view","coords","filterNodes","_a","$pos","element","filter","needLookup","checkDepth","ancestorPos","filterResult","_detachedDoc","detachedDoc","wrapMap","serializeForClipboard","slice","context","openStart","openEnd","content","serializer","DOMSerializer","doc","wrap","firstChild","needsWrap","wrappers","i","wrapper","text","f","brokenClipboardAPI","browser","buffer","BlockService","__privateAdd","_BlockService_instances","_ctx","_createSelection","_activeSelection","_active","_activeDOMRect","_dragging","_notify","_hide","_show","_handleMouseDown","_handleMouseUp","_handleDragStart","_mousemoveCallback","_dragEnd","__privateSet","__privateGet","result","view_get","NodeSelection","nodeSelection","active","ctx","notify","dom","event","selection","activeEl","throttle","rect","x","filterNodes_get","root","hasHorizontalScrollbar","rootRect","top","totalHeight","y","editorViewCtx","blockService","blockSpec","blockPlugin","$prose","milkdownPluginBlockKey","PluginKey","service","spec","Plugin","BlockProvider","options","_BlockProvider_instances","_element","_service","_activeNode","_initialized","_middleware","_floatingUIOptions","_getOffset","_getPosition","_getPlacement","__privateMethod","init_fn","_b","editorDom","deriveContext","virtualEl","middleware","flip","offsetOption","offsetExt","offset","computePosition","message","block"],"mappings":"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"}