{"version":3,"file":"index.es.js","sources":["../src/index.ts"],"sourcesContent":["import { $ctx, $inputRule, $nodeSchema, $remark } from '@milkdown/utils'\nimport type { KatexOptions } from 'katex'\nimport katex from 'katex'\nimport remarkMath from 'remark-math'\n\nimport type { Meta, MilkdownPlugin } from '@milkdown/ctx'\nimport { Fragment } from '@milkdown/prose/model'\nimport { InputRule } from '@milkdown/prose/inputrules'\nimport { expectDomTypeError } from '@milkdown/exception'\nimport { nodeRule } from '@milkdown/prose'\n\nfunction withMeta<T extends MilkdownPlugin>(\n  plugin: T,\n  meta: Partial<Meta> & Pick<Meta, 'displayName'>\n): T {\n  Object.assign(plugin, {\n    meta: {\n      package: '@milkdown/plugin-math',\n      ...meta,\n    },\n  })\n\n  return plugin\n}\n\n/// This plugin wraps [remark-math](https://www.npmjs.com/package/remark-math).\nexport const remarkMathPlugin = $remark<'remarkMath', undefined>(\n  'remarkMath',\n  () => remarkMath\n)\n\nwithMeta(remarkMathPlugin.plugin, {\n  displayName: 'Remark<remarkMath>',\n})\n\nwithMeta(remarkMathPlugin.options, {\n  displayName: 'RemarkConfig<remarkMath>',\n})\n\nconst mathInlineId = 'math_inline'\n\n/// A slice that contains [options for katex](https://katex.org/docs/options.html).\n/// You can configure katex here.\n/// ```ts\n/// import { katexOptionsCtx } from '@milkdown/plugin-math'\n///\n/// Editor.make()\n///   .config((ctx) => {\n///     ctx.set(katexOptionsCtx.key, { /* some options */ });\n///   })\n/// ```\nexport const katexOptionsCtx = $ctx<KatexOptions, 'katexOptions'>(\n  {},\n  'katexOptions'\n)\n\nwithMeta(katexOptionsCtx, {\n  displayName: 'Ctx<katexOptions>',\n})\n\n/// Schema for inline math node.\n/// Add support for:\n///\n/// ```markdown\n/// $a^2 + b^2 = c^2$\n/// ```\nexport const mathInlineSchema = $nodeSchema('math_inline', (ctx) => ({\n  group: 'inline',\n  content: 'text*',\n  inline: true,\n  atom: true,\n  parseDOM: [\n    {\n      tag: `span[data-type=\"${mathInlineId}\"]`,\n      getContent: (dom, schema) => {\n        if (!(dom instanceof HTMLElement)) throw expectDomTypeError(dom)\n\n        return Fragment.from(schema.text(dom.dataset.value ?? ''))\n      },\n    },\n  ],\n  toDOM: (node) => {\n    const code: string = node.textContent\n    const dom = document.createElement('span')\n    dom.dataset.type = mathInlineId\n    dom.dataset.value = code\n    katex.render(code, dom, ctx.get(katexOptionsCtx.key))\n\n    return dom\n  },\n  parseMarkdown: {\n    match: (node) => node.type === 'inlineMath',\n    runner: (state, node, type) => {\n      state\n        .openNode(type)\n        .addText(node.value as string)\n        .closeNode()\n    },\n  },\n  toMarkdown: {\n    match: (node) => node.type.name === mathInlineId,\n    runner: (state, node) => {\n      state.addNode('inlineMath', undefined, node.textContent)\n    },\n  },\n}))\n\nwithMeta(mathInlineSchema.ctx, {\n  displayName: 'NodeSchemaCtx<mathInline>',\n})\nwithMeta(mathInlineSchema.node, {\n  displayName: 'NodeSchema<mathInline>',\n})\n\n/// Input rule for inline math.\n/// When you type $E=MC^2$, it will create an inline math node.\nexport const mathInlineInputRule = $inputRule((ctx) =>\n  nodeRule(/(?:\\$)([^$]+)(?:\\$)$/, mathInlineSchema.type(ctx), {\n    beforeDispatch: ({ tr, match, start }) => {\n      tr.insertText(match[1] ?? '', start + 1)\n    },\n  })\n)\n\nwithMeta(mathInlineInputRule, {\n  displayName: 'InputRule<mathInline>',\n})\n\nconst mathBlockId = 'math_block'\n/// Schema for block math node.\n/// Add support for:\n///\n/// ```markdown\n/// $$\n/// a^2 + b^2 = c^2\n/// $$\n/// ```\nexport const mathBlockSchema = $nodeSchema('math_block', (ctx) => ({\n  content: 'text*',\n  group: 'block',\n  marks: '',\n  defining: true,\n  atom: true,\n  isolating: true,\n  attrs: {\n    value: {\n      default: '',\n    },\n  },\n  parseDOM: [\n    {\n      tag: `div[data-type=\"${mathBlockId}\"]`,\n      preserveWhitespace: 'full',\n      getAttrs: (dom) => {\n        return { value: dom.dataset.value ?? '' }\n      },\n    },\n  ],\n  toDOM: (node) => {\n    const code = node.attrs.value\n    const dom = document.createElement('div')\n    dom.dataset.type = mathBlockId\n    dom.dataset.value = code\n    katex.render(code, dom, ctx.get(katexOptionsCtx.key))\n    return dom\n  },\n  parseMarkdown: {\n    match: ({ type }) => type === 'math',\n    runner: (state, node, type) => {\n      const value = node.value as string\n      state.addNode(type, { value })\n    },\n  },\n  toMarkdown: {\n    match: (node) => node.type.name === mathBlockId,\n    runner: (state, node) => {\n      state.addNode('math', undefined, node.attrs.value)\n    },\n  },\n}))\n\nwithMeta(mathBlockSchema.ctx, {\n  displayName: 'NodeSchemaCtx<mathBlock>',\n})\nwithMeta(mathBlockSchema.node, {\n  displayName: 'NodeSchema<mathBlock>',\n})\n\n/// Input rule for math block.\n/// When you type `$$` and press enter, it will create a math block.\nexport const mathBlockInputRule = $inputRule(\n  (ctx) =>\n    new InputRule(/^\\$\\$\\s$/, (state, _match, start, end) => {\n      const $start = state.doc.resolve(start)\n      if (\n        !$start\n          .node(-1)\n          .canReplaceWith(\n            $start.index(-1),\n            $start.indexAfter(-1),\n            mathBlockSchema.type(ctx)\n          )\n      )\n        return null\n      return state.tr\n        .delete(start, end)\n        .setBlockType(start, start, mathBlockSchema.type(ctx))\n    })\n)\nwithMeta(mathBlockInputRule, {\n  displayName: 'InputRule<mathBlock>',\n})\n\n/// All plugins exported by this package.\nexport const math: MilkdownPlugin[] = [\n  remarkMathPlugin,\n  katexOptionsCtx,\n  mathInlineSchema,\n  mathBlockSchema,\n  mathBlockInputRule,\n  mathInlineInputRule,\n].flat()\n"],"names":["withMeta","plugin","meta","remarkMathPlugin","$remark","remarkMath","mathInlineId","katexOptionsCtx","$ctx","mathInlineSchema","$nodeSchema","ctx","dom","schema","expectDomTypeError","Fragment","node","code","katex","state","type","mathInlineInputRule","$inputRule","nodeRule","tr","match","start","mathBlockId","mathBlockSchema","value","mathBlockInputRule","InputRule","_match","end","$start","math"],"mappings":"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"}