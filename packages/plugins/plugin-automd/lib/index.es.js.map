{"version":3,"file":"index.es.js","sources":["../src/__internal__/with-meta.ts","../src/regexp.ts","../src/utils.ts","../src/config.ts","../src/context.ts","../src/replacer.ts","../src/inline-sync-plugin.ts","../src/index.ts"],"sourcesContent":["import type { Meta, MilkdownPlugin } from '@milkdown/ctx'\n\nexport function withMeta<T extends MilkdownPlugin>(\n  plugin: T,\n  meta: Partial<Meta> & Pick<Meta, 'displayName'>\n): T {\n  Object.assign(plugin, {\n    meta: {\n      package: '@milkdown/plugin-automd',\n      ...meta,\n    },\n  })\n\n  return plugin\n}\n","export const linkRegexp = /\\[([^\\]]+)]\\([^\\s\\]]+\\)/\n\nexport const keepLinkRegexp =\n  /\\[(?<span>((www|https:\\/\\/|http:\\/\\/)[^\\s\\]]+))]\\((?<url>[^\\s\\]]+)\\)/\n\nexport function punctuationRegexp(holePlaceholder: string) {\n  return new RegExp(`\\\\\\\\(?=[^\\\\w\\\\s${holePlaceholder}\\\\\\\\]|_)`, 'g')\n}\n\nexport const ZERO_WIDTH_SPACE = '\\u200B'\n\nexport const asterisk = `${ZERO_WIDTH_SPACE}*`\nexport const asteriskHolder = `${ZERO_WIDTH_SPACE}＊`\nexport const underline = `${ZERO_WIDTH_SPACE}_`\nexport const underlineHolder = `${ZERO_WIDTH_SPACE}⎽`\n","import type { Node } from '@milkdown/prose/model'\n\nimport type { SyncNodePlaceholder } from './config'\nimport {\n  asterisk,\n  asteriskHolder,\n  keepLinkRegexp,\n  punctuationRegexp,\n  underline,\n  underlineHolder,\n} from './regexp'\n\nexport function keepLink(str: string) {\n  let text = str\n  let match = text.match(keepLinkRegexp)\n  while (match && match.groups) {\n    const { span } = match.groups\n    text = text.replace(keepLinkRegexp, span as string)\n\n    match = text.match(keepLinkRegexp)\n  }\n  return text\n}\n\nexport function mergeSlash(str: string) {\n  return str\n    .replaceAll(/\\\\\\\\\\*/g, asterisk)\n    .replaceAll(/\\\\\\\\_/g, underline)\n    .replaceAll(asterisk, asteriskHolder)\n    .replaceAll(underline, underlineHolder)\n}\n\nexport function swap(text: string, first: number, last: number) {\n  const arr = text.split('')\n  const temp = arr[first]\n  if (arr[first] && arr[last]) {\n    arr[first] = arr[last] as string\n    arr[last] = temp as string\n  }\n  return arr.join('').toString()\n}\n\nexport function replacePunctuation(holePlaceholder: string) {\n  return (text: string) => text.replace(punctuationRegexp(holePlaceholder), '')\n}\n\nexport function calculatePlaceholder(placeholder: SyncNodePlaceholder) {\n  return (text: string) => {\n    const index = text.indexOf(placeholder.hole)\n    const left = text.charAt(index - 1)\n    const right = text.charAt(index + 1)\n    const notAWord = /[^\\w]|_/\n\n    // cursor on the right\n    if (!right) return placeholder.punctuation\n\n    // cursor on the left\n    if (!left) return placeholder.char\n\n    if (notAWord.test(left) && notAWord.test(right))\n      return placeholder.punctuation\n\n    return placeholder.char\n  }\n}\n\nexport function calcOffset(node: Node, from: number, placeholder: string) {\n  let offset = from\n  let find = false\n  node.descendants((n) => {\n    if (find) return false\n    if (!n.textContent.includes(placeholder)) {\n      offset += n.nodeSize\n      return false\n    }\n    if (n.isText) {\n      const i = n.text?.indexOf(placeholder)\n      if (i != null && i >= 0) {\n        find = true\n        offset += i\n        return false\n      }\n    }\n\n    // enter the node\n    offset += 1\n    return true\n  })\n  return offset\n}\n","import type { Ctx } from '@milkdown/ctx'\nimport type { Node, NodeType } from '@milkdown/prose/model'\nimport type { Transaction } from '@milkdown/prose/state'\nimport { $ctx } from '@milkdown/utils'\n\nimport { withMeta } from './__internal__'\nimport { swap } from './utils'\n\n/// @internal\nexport type ShouldSyncNode = (context: {\n  prevNode: Node\n  nextNode: Node\n  ctx: Ctx\n  tr: Transaction\n  text: string\n}) => boolean\n\n/// @internal\nexport interface SyncNodePlaceholder {\n  hole: string\n  punctuation: string\n  char: string\n}\n\n/// @internal\nexport interface InlineSyncConfig {\n  placeholderConfig: SyncNodePlaceholder\n  shouldSyncNode: ShouldSyncNode\n  globalNodes: Array<NodeType | string>\n  movePlaceholder: (placeholderToMove: string, text: string) => string\n}\n\n/// @internal\nexport const defaultConfig: InlineSyncConfig = {\n  placeholderConfig: {\n    hole: '∅',\n    punctuation: '⁂',\n    char: '∴',\n  },\n  globalNodes: ['footnote_definition'],\n  shouldSyncNode: ({ prevNode, nextNode }) =>\n    prevNode.inlineContent &&\n    nextNode &&\n    // if node type changes, do not sync\n    prevNode.type === nextNode.type &&\n    // if two node fully equal, we don't modify them\n    !prevNode.eq(nextNode),\n  movePlaceholder: (placeholderToMove: string, text: string) => {\n    const symbolsNeedToMove = ['*', '_']\n\n    let index = text.indexOf(placeholderToMove)\n    while (\n      symbolsNeedToMove.includes(text[index - 1] || '') &&\n      symbolsNeedToMove.includes(text[index + 1] || '')\n    ) {\n      text = swap(text, index, index + 1)\n      index = index + 1\n    }\n\n    return text\n  },\n}\n\n/// A slice that contains the inline sync config.\n/// You can set value to this slice to change the config.\n///\n/// ```typescript\n/// ctx.update(inlineSyncConfigCtx, (prevCfg) => ({\n///   ...prevCfg,\n///   // your config\n/// }));\n/// ```\n///\n/// You can find the default config [here](https://github.com/Milkdown/milkdown/blob/main/packages/plugin-automd/src/config.ts).\nexport const inlineSyncConfig = $ctx<InlineSyncConfig, 'inlineSyncConfig'>(\n  defaultConfig,\n  'inlineSyncConfig'\n)\n\nwithMeta(inlineSyncConfig, {\n  displayName: 'Ctx<inlineSyncConfig>',\n  group: 'Prose',\n})\n","import type { Ctx } from '@milkdown/ctx'\nimport { parserCtx, serializerCtx } from '@milkdown/core'\nimport type { Node } from '@milkdown/prose/model'\nimport type { EditorState } from '@milkdown/prose/state'\nimport { pipe } from '@milkdown/utils'\n\nimport { inlineSyncConfig } from './config'\nimport {\n  calculatePlaceholder,\n  keepLink,\n  mergeSlash,\n  replacePunctuation,\n} from './utils'\nimport { asterisk, asteriskHolder, underline, underlineHolder } from './regexp'\n\nexport interface InlineSyncContext {\n  text: string\n  prevNode: Node\n  nextNode: Node\n  placeholder: string\n}\n\nfunction getNodeFromSelection(state: EditorState) {\n  return state.selection.$from.node()\n}\n\nfunction getMarkdown(\n  ctx: Ctx,\n  state: EditorState,\n  node: Node,\n  globalNode: Node[]\n) {\n  const serializer = ctx.get(serializerCtx)\n  const doc = state.schema.topNodeType.create(undefined, [node, ...globalNode])\n\n  return serializer(doc)\n}\n\nfunction addPlaceholder(ctx: Ctx, markdown: string) {\n  const config = ctx.get(inlineSyncConfig.key)\n  const holePlaceholder = config.placeholderConfig.hole\n\n  const [firstLine = '', ...rest] = markdown.split('\\n\\n')\n\n  const movePlaceholder = (text: string) =>\n    config.movePlaceholder(holePlaceholder, text)\n\n  const handleText = pipe(\n    replacePunctuation(holePlaceholder),\n    movePlaceholder,\n    keepLink,\n    mergeSlash\n  )\n\n  let text = handleText(firstLine)\n  const placeholder = calculatePlaceholder(config.placeholderConfig)(text)\n\n  text = text.replace(holePlaceholder, placeholder)\n\n  text = [text, ...rest].join('\\n\\n')\n\n  return [text, placeholder] as [markdown: string, placeholder: string]\n}\n\nfunction getNewNode(ctx: Ctx, text: string) {\n  const parser = ctx.get(parserCtx)\n  const parsed = parser(text)\n\n  if (!parsed) return null\n\n  return parsed.firstChild\n}\n\nfunction collectGlobalNodes(ctx: Ctx, state: EditorState) {\n  const { globalNodes } = ctx.get(inlineSyncConfig.key)\n  const nodes: Node[] = []\n\n  state.doc.descendants((node) => {\n    if (\n      globalNodes.includes(node.type.name) ||\n      globalNodes.includes(node.type)\n    ) {\n      nodes.push(node)\n      return false\n    }\n\n    return undefined\n  })\n\n  return nodes\n}\n\nconst removeGlobalFromText = (text: string) => text.split('\\n\\n')[0] || ''\n\nfunction onlyHTML(node: Node) {\n  return node.childCount === 1 && node.child(0).type.name === 'html'\n}\n\nexport function getContextByState(\n  ctx: Ctx,\n  state: EditorState\n): InlineSyncContext | null {\n  try {\n    const globalNode = collectGlobalNodes(ctx, state)\n    const node = getNodeFromSelection(state)\n\n    const markdown = getMarkdown(ctx, state, node, globalNode)\n    const [text, placeholder] = addPlaceholder(ctx, markdown)\n\n    const newNode = getNewNode(ctx, text)\n\n    if (!newNode || node.type !== newNode.type || onlyHTML(newNode)) return null\n\n    // @ts-expect-error hijack the node attribute\n    newNode.attrs = { ...node.attrs }\n\n    newNode.descendants((node) => {\n      const marks = node.marks\n      const link = marks.find((mark) => mark.type.name === 'link')\n      if (\n        link &&\n        node.text?.includes(placeholder) &&\n        link.attrs.href.includes(placeholder)\n      ) {\n        // @ts-expect-error hijack the mark attribute\n        link.attrs.href = link.attrs.href.replace(placeholder, '')\n      }\n      if (\n        node.text?.includes(asteriskHolder) ||\n        node.text?.includes(underlineHolder)\n      ) {\n        // @ts-expect-error hijack the attribute\n        node.text = node.text\n          .replaceAll(asteriskHolder, asterisk)\n          .replaceAll(underlineHolder, underline)\n      }\n    })\n\n    return {\n      text: removeGlobalFromText(text),\n      prevNode: node,\n      nextNode: newNode,\n      placeholder,\n    }\n  } catch {\n    return null\n  }\n}\n","import type { Ctx } from '@milkdown/ctx'\nimport type { Attrs } from '@milkdown/prose/model'\nimport type { EditorState, PluginKey, Transaction } from '@milkdown/prose/state'\nimport { TextSelection } from '@milkdown/prose/state'\n\nimport { inlineSyncConfig } from './config'\nimport { getContextByState } from './context'\nimport { calcOffset } from './utils'\nimport { linkRegexp } from './regexp'\n\nexport function runReplacer(\n  ctx: Ctx,\n  key: PluginKey,\n  state: EditorState,\n  dispatch: (tr: Transaction) => void,\n  attrs: Attrs\n) {\n  const { placeholderConfig } = ctx.get(inlineSyncConfig.key)\n  const holePlaceholder = placeholderConfig.hole\n  // insert a placeholder to restore the selection\n  let tr = state.tr\n    .setMeta(key, true)\n    .insertText(holePlaceholder, state.selection.from)\n\n  const nextState = state.apply(tr)\n  const context = getContextByState(ctx, nextState)\n\n  if (!context) return\n\n  const lastUserInput = context.text.slice(\n    0,\n    context.text.indexOf(context.placeholder)\n  )\n\n  const { $from } = nextState.selection\n  const from = $from.before()\n  const to = $from.after()\n\n  const offset = calcOffset(context.nextNode, from, context.placeholder)\n\n  tr = tr\n    .replaceWith(from, to, context.nextNode)\n    .setNodeMarkup(from, undefined, attrs)\n    // delete the placeholder\n    .delete(offset + 1, offset + 2)\n\n  // restore the selection\n  tr = tr.setSelection(TextSelection.near(tr.doc.resolve(offset + 1)))\n\n  const needsRestoreMark =\n    linkRegexp.test(lastUserInput) ||\n    ['*', '_', '~'].includes(lastUserInput.at(-1) || '')\n  if (needsRestoreMark && tr.selection instanceof TextSelection) {\n    const marks = tr.selection.$cursor?.marks() ?? []\n    marks.forEach((mark) => {\n      tr = tr.removeStoredMark(mark.type)\n    })\n  }\n\n  dispatch(tr)\n}\n","import type { Ctx } from '@milkdown/ctx'\nimport { editorViewCtx } from '@milkdown/core'\nimport { Plugin, PluginKey } from '@milkdown/prose/state'\nimport { $prose } from '@milkdown/utils'\n\nimport { withMeta } from './__internal__'\nimport { inlineSyncConfig } from './config'\nimport { getContextByState } from './context'\nimport { runReplacer } from './replacer'\n\n/// This plugin is used to sync the inline mark.\n/// It will create and remove marks automatically according to the user input.\n///\n/// When users type something, the plugin will transform the line (for better performance) to real markdown AST by serializer\n/// and render the AST to dom by parser, thus the input texts can be displayed correctly.\nexport const inlineSyncPlugin = $prose((ctx: Ctx) => {\n  let requestId: number | null = null\n  const inlineSyncPluginKey = new PluginKey('MILKDOWN_INLINE_SYNC')\n\n  return new Plugin<null>({\n    key: inlineSyncPluginKey,\n    state: {\n      init: () => {\n        return null\n      },\n      apply: (tr, _value, _oldState, newState) => {\n        const view = ctx.get(editorViewCtx)\n        if (!view.hasFocus?.() || !view.editable) return null\n\n        if (!tr.docChanged) return null\n\n        const meta = tr.getMeta(inlineSyncPluginKey)\n        if (meta) return null\n\n        const context = getContextByState(ctx, newState)\n        if (!context) return null\n\n        if (requestId) {\n          cancelAnimationFrame(requestId)\n          requestId = null\n        }\n\n        const { prevNode, nextNode, text } = context\n\n        const { shouldSyncNode } = ctx.get(inlineSyncConfig.key)\n\n        if (!shouldSyncNode({ prevNode, nextNode, ctx, tr, text })) return null\n\n        requestId = requestAnimationFrame(() => {\n          requestId = null\n\n          const { dispatch, state } = ctx.get(editorViewCtx)\n\n          runReplacer(ctx, inlineSyncPluginKey, state, dispatch, prevNode.attrs)\n        })\n\n        return null\n      },\n    },\n  })\n})\n\nwithMeta(inlineSyncPlugin, {\n  displayName: 'Prose<inlineSyncPlugin>',\n  group: 'Prose',\n})\n","import type { MilkdownPlugin } from '@milkdown/ctx'\nimport { inlineSyncConfig } from './config'\nimport { inlineSyncPlugin } from './inline-sync-plugin'\n\nexport * from './config'\nexport * from './inline-sync-plugin'\n\nexport const automd: MilkdownPlugin[] = [inlineSyncConfig, inlineSyncPlugin]\n"],"names":["withMeta","plugin","meta","linkRegexp","keepLinkRegexp","punctuationRegexp","holePlaceholder","ZERO_WIDTH_SPACE","asterisk","asteriskHolder","underline","underlineHolder","keepLink","str","text","match","span","mergeSlash","swap","first","last","arr","temp","replacePunctuation","calculatePlaceholder","placeholder","index","left","right","notAWord","calcOffset","node","from","offset","find","n","i","_a","defaultConfig","prevNode","nextNode","placeholderToMove","symbolsNeedToMove","inlineSyncConfig","$ctx","getNodeFromSelection","state","getMarkdown","ctx","globalNode","serializer","serializerCtx","doc","addPlaceholder","markdown","config","firstLine","rest","movePlaceholder","pipe","getNewNode","parsed","parserCtx","collectGlobalNodes","globalNodes","nodes","removeGlobalFromText","onlyHTML","getContextByState","newNode","link","mark","runReplacer","key","dispatch","attrs","placeholderConfig","tr","nextState","context","lastUserInput","$from","to","TextSelection","inlineSyncPlugin","$prose","requestId","inlineSyncPluginKey","PluginKey","Plugin","_value","_oldState","newState","view","editorViewCtx","shouldSyncNode","automd"],"mappings":"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"}