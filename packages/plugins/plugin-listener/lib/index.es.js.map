{"version":3,"file":"index.es.js","sources":["../src/index.ts"],"sourcesContent":["import { createSlice } from '@milkdown/ctx'\nimport type { Ctx, MilkdownPlugin } from '@milkdown/ctx'\nimport {\n  EditorViewReady,\n  InitReady,\n  SerializerReady,\n  prosePluginsCtx,\n  serializerCtx,\n} from '@milkdown/core'\nimport type { Node as ProseNode } from '@milkdown/prose/model'\nimport { Plugin, PluginKey } from '@milkdown/prose/state'\nimport debounce from 'lodash.debounce'\n\n/// The dictionary of subscribers of each event.\nexport interface Subscribers {\n  beforeMount: ((ctx: Ctx) => void)[]\n  mounted: ((ctx: Ctx) => void)[]\n  updated: ((ctx: Ctx, doc: ProseNode, prevDoc: ProseNode) => void)[]\n  markdownUpdated: ((\n    ctx: Ctx,\n    markdown: string,\n    prevMarkdown: string\n  ) => void)[]\n  blur: ((ctx: Ctx) => void)[]\n  focus: ((ctx: Ctx) => void)[]\n  destroy: ((ctx: Ctx) => void)[]\n}\n\n/// The manager of listeners. It provides methods to subscribe to events.\nexport class ListenerManager {\n  private beforeMountedListeners: Array<(ctx: Ctx) => void> = []\n  private mountedListeners: Array<(ctx: Ctx) => void> = []\n  private updatedListeners: Array<\n    (ctx: Ctx, doc: ProseNode, prevDoc: ProseNode) => void\n  > = []\n  private markdownUpdatedListeners: Array<\n    (ctx: Ctx, markdown: string, prevMarkdown: string) => void\n  > = []\n  private blurListeners: Array<(ctx: Ctx) => void> = []\n  private focusListeners: Array<(ctx: Ctx) => void> = []\n  private destroyListeners: Array<(ctx: Ctx) => void> = []\n\n  /// A getter to get all [subscribers](#interface-subscribers). You should not use this method directly.\n  get listeners(): Subscribers {\n    return {\n      beforeMount: this.beforeMountedListeners,\n      mounted: this.mountedListeners,\n      updated: this.updatedListeners,\n      markdownUpdated: this.markdownUpdatedListeners,\n      blur: this.blurListeners,\n      focus: this.focusListeners,\n      destroy: this.destroyListeners,\n    }\n  }\n\n  /// Subscribe to the beforeMount event.\n  /// This event will be triggered before the editor is mounted.\n  beforeMount = (fn: (ctx: Ctx) => void) => {\n    this.beforeMountedListeners.push(fn)\n    return this\n  }\n\n  /// Subscribe to the mounted event.\n  /// This event will be triggered after the editor is mounted.\n  mounted = (fn: (ctx: Ctx) => void) => {\n    this.mountedListeners.push(fn)\n    return this\n  }\n\n  /// Subscribe to the updated event.\n  /// This event will be triggered after the editor state is updated and **the document is changed**.\n  /// The second parameter is the current document and the third parameter is the previous document.\n  updated = (\n    fn: (ctx: Ctx, doc: ProseNode, prevDoc: ProseNode | null) => void\n  ) => {\n    this.updatedListeners.push(fn)\n    return this\n  }\n\n  /// Subscribe to the markdownUpdated event.\n  /// This event will be triggered after the editor state is updated and **the document is changed**.\n  /// The second parameter is the current markdown and the third parameter is the previous markdown.\n  markdownUpdated(\n    fn: (ctx: Ctx, markdown: string, prevMarkdown: string) => void\n  ) {\n    this.markdownUpdatedListeners.push(fn)\n    return this\n  }\n\n  /// Subscribe to the blur event.\n  /// This event will be triggered when the editor is blurred.\n  blur(fn: (ctx: Ctx) => void) {\n    this.blurListeners.push(fn)\n    return this\n  }\n\n  /// Subscribe to the focus event.\n  /// This event will be triggered when the editor is focused.\n  focus(fn: (ctx: Ctx) => void) {\n    this.focusListeners.push(fn)\n    return this\n  }\n\n  /// Subscribe to the destroy event.\n  /// This event will be triggered before the editor is destroyed.\n  destroy(fn: (ctx: Ctx) => void) {\n    this.destroyListeners.push(fn)\n    return this\n  }\n}\n\n/// The ctx key of the listener manager.\n/// You can use `ctx.get(listenerCtx)` to get the [listener manager](#class-listenermanager).\nexport const listenerCtx = createSlice<ListenerManager>(\n  new ListenerManager(),\n  'listener'\n)\n\n/// The plugin key of the listener prosemirror plugin.\nexport const key = new PluginKey('MILKDOWN_LISTENER')\n\n/// The listener plugin.\nexport const listener: MilkdownPlugin = (ctx) => {\n  ctx.inject(listenerCtx, new ListenerManager())\n\n  return async () => {\n    await ctx.wait(InitReady)\n    const listener = ctx.get(listenerCtx)\n    const { listeners } = listener\n\n    listeners.beforeMount.forEach((fn) => fn(ctx))\n\n    await ctx.wait(SerializerReady)\n    const serializer = ctx.get(serializerCtx)\n\n    let prevDoc: ProseNode | null = null\n    let prevMarkdown: string | null = null\n\n    const plugin = new Plugin({\n      key,\n      view: () => {\n        return {\n          destroy: () => {\n            listeners.destroy.forEach((fn) => fn(ctx))\n          },\n        }\n      },\n      props: {\n        handleDOMEvents: {\n          focus: () => {\n            listeners.focus.forEach((fn) => fn(ctx))\n            return false\n          },\n          blur: () => {\n            listeners.blur.forEach((fn) => fn(ctx))\n            return false\n          },\n        },\n      },\n      state: {\n        init: (_, instance) => {\n          prevDoc = instance.doc\n          prevMarkdown = serializer(instance.doc)\n        },\n        apply: (tr) => {\n          if (!tr.docChanged || tr.getMeta('addToHistory') === false) return\n\n          const handler = debounce(() => {\n            const { doc } = tr\n            if (listeners.updated.length > 0 && prevDoc && !prevDoc.eq(doc)) {\n              listeners.updated.forEach((fn) => {\n                fn(ctx, doc, prevDoc!)\n              })\n            }\n\n            if (\n              listeners.markdownUpdated.length > 0 &&\n              prevDoc &&\n              !prevDoc.eq(doc)\n            ) {\n              const markdown = serializer(doc)\n              listeners.markdownUpdated.forEach((fn) => {\n                fn(ctx, markdown, prevMarkdown!)\n              })\n              prevMarkdown = markdown\n            }\n\n            prevDoc = doc\n          }, 200)\n\n          return handler()\n        },\n      },\n    })\n    ctx.update(prosePluginsCtx, (x) => x.concat(plugin))\n\n    await ctx.wait(EditorViewReady)\n    listeners.mounted.forEach((fn) => fn(ctx))\n  }\n}\n\nlistener.meta = {\n  package: '@milkdown/plugin-listener',\n  displayName: 'Listener',\n}\n"],"names":["ListenerManager","fn","listenerCtx","createSlice","key","PluginKey","listener","ctx","InitReady","listeners","SerializerReady","serializer","serializerCtx","prevDoc","prevMarkdown","plugin","Plugin","_","instance","tr","debounce","doc","markdown","prosePluginsCtx","x","EditorViewReady"],"mappings":"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"}