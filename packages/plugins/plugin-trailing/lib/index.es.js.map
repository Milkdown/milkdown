{"version":3,"file":"index.es.js","sources":["../src/index.ts"],"sourcesContent":["import type { MilkdownPlugin } from '@milkdown/ctx'\nimport type { Node } from '@milkdown/prose/model'\nimport type { EditorState } from '@milkdown/prose/state'\nimport { Plugin, PluginKey } from '@milkdown/prose/state'\nimport { $ctx, $prose } from '@milkdown/utils'\n\n/// Options for trailing config.\nexport interface TrailingConfigOptions {\n  /// A function that returns a boolean value.\n  /// If it returns `true`, the plugin will append a node at the end of the document.\n  /// By default, it returns `false` if the last node is a heading or a paragraph.\n  shouldAppend: (lastNode: Node | null, state: EditorState) => boolean\n  /// A function that returns a node.\n  /// By default, it returns a paragraph node.\n  getNode: (state: EditorState) => Node\n}\n\n/// A slice contains the trailing config.\n/// You can use [TrailingConfigOptions](#TrailingConfigOptions) to customize the behavior of the plugin.\nexport const trailingConfig = $ctx<TrailingConfigOptions, 'trailingConfig'>(\n  {\n    shouldAppend: (lastNode) => {\n      if (!lastNode) return false\n\n      if (['heading', 'paragraph'].includes(lastNode.type.name)) return false\n\n      return true\n    },\n    getNode: (state) => state.schema.nodes.paragraph!.create(),\n  },\n  'trailingConfig'\n)\n\ntrailingConfig.meta = {\n  package: '@milkdown/plugin-trailing',\n  displayName: 'Ctx<trailingConfig>',\n}\n\n/// The prosemirror plugin for trailing.\nexport const trailingPlugin = $prose((ctx) => {\n  const trailingPluginKey = new PluginKey('MILKDOWN_TRAILING')\n  const { shouldAppend, getNode } = ctx.get(trailingConfig.key)\n  const plugin = new Plugin({\n    key: trailingPluginKey,\n    state: {\n      init: (_, state) => {\n        const lastNode = state.tr.doc.lastChild\n\n        return shouldAppend(lastNode, state)\n      },\n      apply: (tr, value, _, state) => {\n        if (!tr.docChanged) return value\n\n        const lastNode = tr.doc.lastChild\n\n        return shouldAppend(lastNode, state)\n      },\n    },\n    appendTransaction: (_, __, state) => {\n      const { doc, tr } = state\n      const nodeType = getNode?.(state)\n      const shouldInsertNodeAtEnd = plugin.getState(state)\n      const endPosition = doc.content.size\n\n      if (!shouldInsertNodeAtEnd || !nodeType) return\n\n      return tr.insert(endPosition, nodeType)\n    },\n  })\n\n  return plugin\n})\n\ntrailingPlugin.meta = {\n  package: '@milkdown/plugin-trailing',\n  displayName: 'Prose<trailing>',\n}\n\n/// All plugins exported by this package.\nexport const trailing: MilkdownPlugin[] = [trailingConfig, trailingPlugin]\n"],"names":["trailingConfig","$ctx","lastNode","state","trailingPlugin","$prose","ctx","trailingPluginKey","PluginKey","shouldAppend","getNode","plugin","Plugin","_","tr","value","__","doc","nodeType","shouldInsertNodeAtEnd","endPosition","trailing"],"mappings":";;AAmBO,MAAMA,IAAiBC;AAAA,EAC5B;AAAA,IACE,cAAc,CAACC,MACT,GAACA,KAED,CAAC,WAAW,WAAW,EAAE,SAASA,EAAS,KAAK,IAAI;AAAA,IAI1D,SAAS,CAACC,MAAUA,EAAM,OAAO,MAAM,UAAW,OAAO;AAAA,EAC3D;AAAA,EACA;AACF;AAEAH,EAAe,OAAO;AAAA,EACpB,SAAS;AAAA,EACT,aAAa;AACf;AAGa,MAAAI,IAAiBC,EAAO,CAACC,MAAQ;AACtC,QAAAC,IAAoB,IAAIC,EAAU,mBAAmB,GACrD,EAAE,cAAAC,GAAc,SAAAC,MAAYJ,EAAI,IAAIN,EAAe,GAAG,GACtDW,IAAS,IAAIC,EAAO;AAAA,IACxB,KAAKL;AAAA,IACL,OAAO;AAAA,MACL,MAAM,CAACM,GAAGV,MAAU;AACZ,cAAAD,IAAWC,EAAM,GAAG,IAAI;AAEvB,eAAAM,EAAaP,GAAUC,CAAK;AAAA,MACrC;AAAA,MACA,OAAO,CAACW,GAAIC,GAAOF,GAAGV,MAAU;AAC1B,YAAA,CAACW,EAAG,WAAmB,QAAAC;AAErB,cAAAb,IAAWY,EAAG,IAAI;AAEjB,eAAAL,EAAaP,GAAUC,CAAK;AAAA,MAAA;AAAA,IAEvC;AAAA,IACA,mBAAmB,CAACU,GAAGG,GAAIb,MAAU;AAC7B,YAAA,EAAE,KAAAc,GAAK,IAAAH,EAAA,IAAOX,GACde,IAAWR,KAAA,gBAAAA,EAAUP,IACrBgB,IAAwBR,EAAO,SAASR,CAAK,GAC7CiB,IAAcH,EAAI,QAAQ;AAE5B,UAAA,GAACE,KAAyB,CAACD;AAExB,eAAAJ,EAAG,OAAOM,GAAaF,CAAQ;AAAA,IAAA;AAAA,EACxC,CACD;AAEM,SAAAP;AACT,CAAC;AAEDP,EAAe,OAAO;AAAA,EACpB,SAAS;AAAA,EACT,aAAa;AACf;AAGa,MAAAiB,IAA6B,CAACrB,GAAgBI,CAAc;"}