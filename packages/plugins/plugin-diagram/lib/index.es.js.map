{"version":3,"file":"index.es.js","sources":["../src/remark-mermaid.ts","../src/__internal__/get-id.ts","../src/__internal__/with-meta.ts","../src/node.ts","../src/index.ts"],"sourcesContent":["import type { Node } from '@milkdown/transformer'\nimport { visit } from 'unist-util-visit'\n\nfunction createMermaidDiv(contents: string) {\n  return {\n    type: 'diagram',\n    value: contents,\n  }\n}\n\nfunction visitCodeBlock(ast: Node) {\n  return visit(ast, 'code', (node, index, parent: Node & { children: Node[] }) => {\n    const { lang, value } = node\n\n    // If this codeblock is not mermaid, bail.\n    if (lang !== 'mermaid')\n      return node\n\n    const newNode = createMermaidDiv(value)\n\n    if (parent && index != null)\n      parent.children.splice(index, 1, newNode)\n\n    return node\n  })\n}\n\nexport function remarkMermaid() {\n  function transformer(tree: Node) {\n    visitCodeBlock(tree)\n  }\n\n  return transformer\n}\n","import type { Node } from '@milkdown/prose/model'\nimport { customAlphabet } from 'nanoid'\n\nconst nanoid = customAlphabet('abcdefg', 8)\n\nexport const getId = (node?: Node) => node?.attrs?.identity || nanoid()\n","import type { Meta, MilkdownPlugin } from '@milkdown/ctx'\n\nexport function withMeta<T extends MilkdownPlugin>(plugin: T, meta: Partial<Meta> & Pick<Meta, 'displayName'>): T {\n  Object.assign(plugin, {\n    meta: {\n      package: '@milkdown/plugin-diagram',\n      ...meta,\n    },\n  })\n\n  return plugin\n}\n","import { expectDomTypeError } from '@milkdown/exception'\nimport { setBlockType } from '@milkdown/prose/commands'\nimport { InputRule } from '@milkdown/prose/inputrules'\nimport { $command, $ctx, $inputRule, $nodeSchema, $remark } from '@milkdown/utils'\nimport type { MermaidConfig } from 'mermaid'\nimport mermaid from 'mermaid'\n\nimport { remarkMermaid } from './remark-mermaid'\nimport { getId } from './__internal__/get-id'\nimport { withMeta } from './__internal__/with-meta'\n\n/// A slice that contains [options for mermaid](https://mermaid.js.org/config/setup/modules/config.html).\n/// You can configure mermaid here.\n/// ```ts\n/// import { mermaidConfigCtx } from '@milkdown/plugin-diagram'\n///\n/// Editor.make()\n///   .config((ctx) => {\n///     ctx.set(mermaidConfigCtx.key, { /* some options */ });\n///   })\n/// ```\nexport const mermaidConfigCtx = $ctx<MermaidConfig, 'mermaidConfig'>({ startOnLoad: false }, 'mermaidConfig')\n\nwithMeta(mermaidConfigCtx, {\n  displayName: 'Ctx<mermaidConfig>',\n})\n\nconst id = 'diagram'\n/// Schema for diagram node.\nexport const diagramSchema = $nodeSchema(id, (ctx) => {\n  mermaid.initialize({\n    ...ctx.get(mermaidConfigCtx.key),\n  })\n  return {\n    content: 'text*',\n    group: 'block',\n    marks: '',\n    defining: true,\n    atom: true,\n    isolating: true,\n    attrs: {\n      value: {\n        default: '',\n      },\n      identity: {\n        default: '',\n      },\n    },\n    parseDOM: [\n      {\n        tag: `div[data-type=\"${id}\"]`,\n        preserveWhitespace: 'full',\n        getAttrs: (dom) => {\n          if (!(dom instanceof HTMLElement))\n            throw expectDomTypeError(dom)\n\n          return {\n            value: dom.dataset.value,\n            identity: dom.dataset.id,\n          }\n        },\n      },\n    ],\n    toDOM: (node) => {\n      const identity = getId(node)\n      const code = node.attrs.value as string\n\n      const dom = document.createElement('div')\n      dom.dataset.type = id\n      dom.dataset.id = identity\n      dom.dataset.value = code\n      dom.textContent = code\n\n      return dom\n    },\n    parseMarkdown: {\n      match: ({ type }) => type === id,\n      runner: (state, node, type) => {\n        const value = node.value as string\n        state.addNode(type, { value, identity: getId() })\n      },\n    },\n    toMarkdown: {\n      match: node => node.type.name === id,\n      runner: (state, node) => {\n        state.addNode('code', undefined, node.attrs.value || '', { lang: 'mermaid' })\n      },\n    },\n  }\n})\n\nwithMeta(diagramSchema.node, {\n  displayName: 'NodeSchema<diagram>',\n})\nwithMeta(diagramSchema.ctx, {\n  displayName: 'NodeSchemaCtx<diagram>',\n})\n\n/// A input rule that will insert a diagram node when you type ` ```mermaid `.\nexport const insertDiagramInputRules = $inputRule(ctx =>\n  new InputRule(/^```mermaid$/, (state, _match, start, end) => {\n    const nodeType = diagramSchema.type(ctx)\n    const $start = state.doc.resolve(start)\n    if (!$start.node(-1).canReplaceWith($start.index(-1), $start.indexAfter(-1), nodeType))\n      return null\n    return state.tr.delete(start, end).setBlockType(start, start, nodeType, { identity: getId() })\n  }))\n\nwithMeta(insertDiagramInputRules, {\n  displayName: 'InputRule<insertDiagramInputRules>',\n})\n\n/// A remark plugin that will parse mermaid code block.\nexport const remarkDiagramPlugin = $remark('remarkMermaid', () => remarkMermaid)\n\nwithMeta(remarkDiagramPlugin.plugin, {\n  displayName: 'Remark<diagram>',\n})\n\nwithMeta(remarkDiagramPlugin.options, {\n  displayName: 'RemarkConfig<diagram>',\n})\n\n/// A command that will insert a diagram node.\nexport const insertDiagramCommand = $command('InsertDiagramCommand', ctx => () => setBlockType(diagramSchema.type(ctx), { identity: getId() }))\n\nwithMeta(insertDiagramCommand, {\n  displayName: 'Command<insertDiagramCommand>',\n})\n","import type { MilkdownPlugin } from '@milkdown/ctx'\nimport { diagramSchema, insertDiagramCommand, insertDiagramInputRules, mermaidConfigCtx, remarkDiagramPlugin } from './node'\n\nexport * from './node'\n\n/// All plugins exported by this package.\nexport const diagram: MilkdownPlugin[] = [remarkDiagramPlugin, mermaidConfigCtx, diagramSchema, insertDiagramCommand, insertDiagramInputRules].flat()\n"],"names":["createMermaidDiv","contents","visitCodeBlock","ast","visit","node","index","parent","lang","value","newNode","remarkMermaid","transformer","tree","nanoid","customAlphabet","getId","_a","withMeta","plugin","meta","mermaidConfigCtx","$ctx","id","diagramSchema","$nodeSchema","ctx","mermaid","dom","expectDomTypeError","identity","code","type","state","insertDiagramInputRules","$inputRule","InputRule","_match","start","end","nodeType","$start","remarkDiagramPlugin","$remark","insertDiagramCommand","$command","setBlockType","diagram"],"mappings":";;;;;;;AAGA,SAASA,EAAiBC,GAAkB;AACnC,SAAA;AAAA,IACL,MAAM;AAAA,IACN,OAAOA;AAAA,EACT;AACF;AAEA,SAASC,EAAeC,GAAW;AACjC,SAAOC,EAAMD,GAAK,QAAQ,CAACE,GAAMC,GAAOC,MAAwC;AACxE,UAAA,EAAE,MAAAC,GAAM,OAAAC,EAAA,IAAUJ;AAGxB,QAAIG,MAAS;AACJ,aAAAH;AAEH,UAAAK,IAAUV,EAAiBS,CAAK;AAEtC,WAAIF,KAAUD,KAAS,QACrBC,EAAO,SAAS,OAAOD,GAAO,GAAGI,CAAO,GAEnCL;AAAA,EAAA,CACR;AACH;AAEO,SAASM,IAAgB;AAC9B,WAASC,EAAYC,GAAY;AAC/B,IAAAX,EAAeW,CAAI;AAAA,EAAA;AAGd,SAAAD;AACT;AC9BA,MAAME,IAASC,EAAe,WAAW,CAAC,GAE7BC,IAAQ,CAACX,MAAgB;;AAAA,WAAAY,IAAAZ,KAAA,gBAAAA,EAAM,UAAN,gBAAAY,EAAa,aAAYH,EAAO;AAAA;ACHtD,SAAAI,EAAmCC,GAAWC,GAAoD;AAChH,gBAAO,OAAOD,GAAQ;AAAA,IACpB,MAAM;AAAA,MACJ,SAAS;AAAA,MACT,GAAGC;AAAA,IAAA;AAAA,EACL,CACD,GAEMD;AACT;ACUO,MAAME,IAAmBC,EAAqC,EAAE,aAAa,MAAS,eAAe;AAE5GJ,EAASG,GAAkB;AAAA,EACzB,aAAa;AACf,CAAC;AAED,MAAME,IAAK,WAEEC,IAAgBC,EAAYF,GAAI,CAACG,OAC5CC,EAAQ,WAAW;AAAA,EACjB,GAAGD,EAAI,IAAIL,EAAiB,GAAG;AAAA,CAChC,GACM;AAAA,EACL,SAAS;AAAA,EACT,OAAO;AAAA,EACP,OAAO;AAAA,EACP,UAAU;AAAA,EACV,MAAM;AAAA,EACN,WAAW;AAAA,EACX,OAAO;AAAA,IACL,OAAO;AAAA,MACL,SAAS;AAAA,IACX;AAAA,IACA,UAAU;AAAA,MACR,SAAS;AAAA,IAAA;AAAA,EAEb;AAAA,EACA,UAAU;AAAA,IACR;AAAA,MACE,KAAK,kBAAkBE,CAAE;AAAA,MACzB,oBAAoB;AAAA,MACpB,UAAU,CAACK,MAAQ;AACjB,YAAI,EAAEA,aAAe;AACnB,gBAAMC,EAAmBD,CAAG;AAEvB,eAAA;AAAA,UACL,OAAOA,EAAI,QAAQ;AAAA,UACnB,UAAUA,EAAI,QAAQ;AAAA,QACxB;AAAA,MAAA;AAAA,IACF;AAAA,EAEJ;AAAA,EACA,OAAO,CAACvB,MAAS;AACT,UAAAyB,IAAWd,EAAMX,CAAI,GACrB0B,IAAO1B,EAAK,MAAM,OAElBuB,IAAM,SAAS,cAAc,KAAK;AACxC,WAAAA,EAAI,QAAQ,OAAOL,GACnBK,EAAI,QAAQ,KAAKE,GACjBF,EAAI,QAAQ,QAAQG,GACpBH,EAAI,cAAcG,GAEXH;AAAA,EACT;AAAA,EACA,eAAe;AAAA,IACb,OAAO,CAAC,EAAE,MAAAI,QAAWA,MAAST;AAAA,IAC9B,QAAQ,CAACU,GAAO5B,GAAM2B,MAAS;AAC7B,YAAMvB,IAAQJ,EAAK;AACnB,MAAA4B,EAAM,QAAQD,GAAM,EAAE,OAAAvB,GAAO,UAAUO,EAAA,GAAS;AAAA,IAAA;AAAA,EAEpD;AAAA,EACA,YAAY;AAAA,IACV,OAAO,CAAAX,MAAQA,EAAK,KAAK,SAASkB;AAAA,IAClC,QAAQ,CAACU,GAAO5B,MAAS;AACjB,MAAA4B,EAAA,QAAQ,QAAQ,QAAW5B,EAAK,MAAM,SAAS,IAAI,EAAE,MAAM,UAAA,CAAW;AAAA,IAAA;AAAA,EAC9E;AAEJ,EACD;AAEDa,EAASM,EAAc,MAAM;AAAA,EAC3B,aAAa;AACf,CAAC;AACDN,EAASM,EAAc,KAAK;AAAA,EAC1B,aAAa;AACf,CAAC;AAGY,MAAAU,IAA0BC,EAAW,CAAAT,MAChD,IAAIU,EAAU,gBAAgB,CAACH,GAAOI,GAAQC,GAAOC,MAAQ;AACrD,QAAAC,IAAWhB,EAAc,KAAKE,CAAG,GACjCe,IAASR,EAAM,IAAI,QAAQK,CAAK;AACtC,SAAKG,EAAO,KAAK,EAAE,EAAE,eAAeA,EAAO,MAAM,EAAE,GAAGA,EAAO,WAAW,EAAE,GAAGD,CAAQ,IAE9EP,EAAM,GAAG,OAAOK,GAAOC,CAAG,EAAE,aAAaD,GAAOA,GAAOE,GAAU,EAAE,UAAUxB,KAAS,IADpF;AAEX,CAAC,CAAC;AAEJE,EAASgB,GAAyB;AAAA,EAChC,aAAa;AACf,CAAC;AAGM,MAAMQ,IAAsBC,EAAQ,iBAAiB,MAAMhC,CAAa;AAE/EO,EAASwB,EAAoB,QAAQ;AAAA,EACnC,aAAa;AACf,CAAC;AAEDxB,EAASwB,EAAoB,SAAS;AAAA,EACpC,aAAa;AACf,CAAC;AAGM,MAAME,IAAuBC,EAAS,wBAAwB,CAAAnB,MAAO,MAAMoB,EAAatB,EAAc,KAAKE,CAAG,GAAG,EAAE,UAAUV,EAAM,EAAA,CAAG,CAAC;AAE9IE,EAAS0B,GAAsB;AAAA,EAC7B,aAAa;AACf,CAAC;AC1HY,MAAAG,IAA4B,CAACL,GAAqBrB,GAAkBG,GAAeoB,GAAsBV,CAAuB,EAAE,KAAK;"}