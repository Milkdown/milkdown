{"version":3,"file":"index.es.js","sources":["../src/default-uploader.ts","../src/upload.ts","../src/index.ts"],"sourcesContent":["import { missingNodeInSchema } from '@milkdown/exception'\nimport type { Node } from '@milkdown/prose/model'\n\nimport type { Uploader } from './upload'\n\n/// Read the image file as base64.\nexport function readImageAsBase64(file: File): Promise<{ alt: string, src: string }> {\n  return new Promise((resolve) => {\n    const reader = new FileReader()\n    reader.addEventListener(\n      'load',\n      () => {\n        resolve({\n          alt: file.name,\n          src: reader.result as string,\n        })\n      },\n      false,\n    )\n    reader.readAsDataURL(file)\n  })\n}\n\n/// The default uploader.\n/// It will upload transform images to base64.\nexport const defaultUploader: Uploader = async (files, schema) => {\n  const imgs: File[] = []\n\n  for (let i = 0; i < files.length; i++) {\n    const file = files.item(i)\n    if (!file)\n      continue\n\n    if (!file.type.includes('image'))\n      continue\n\n    imgs.push(file)\n  }\n\n  const { image } = schema.nodes\n  if (!image)\n    throw missingNodeInSchema('image')\n\n  const data = await Promise.all(imgs.map(img => readImageAsBase64(img)))\n\n  return data.map(({ alt, src }) => image.createAndFill({ src, alt }) as Node)\n}\n","import { schemaCtx } from '@milkdown/core'\nimport type { Fragment, Node, Schema } from '@milkdown/prose/model'\nimport type { EditorState } from '@milkdown/prose/state'\nimport { Plugin, PluginKey } from '@milkdown/prose/state'\nimport type { EditorView } from '@milkdown/prose/view'\nimport { Decoration, DecorationSet } from '@milkdown/prose/view'\nimport { $ctx, $prose } from '@milkdown/utils'\n\nimport { defaultUploader } from './default-uploader'\n\n/// @internal\nexport type Uploader = UploadOptions['uploader']\ninterface Spec { id: symbol, pos: number }\n\n/// The configuration for upload.\nexport interface UploadOptions {\n  /// The uploader for upload plugin.\n  /// It takes the files and schema as parameters.\n  /// It should return a `Promise` of Prosemirror `Fragment` or `Node` or `Node[]`.\n  uploader: (files: FileList, schema: Schema) => Promise<Fragment | Node | Node[]>\n  /// Whether to enable the html file uploader.\n  /// When paste files from html (for example copy images by right click context menu),\n  /// this option will make the plugin to upload the image copied instead of using the original link.\n  enableHtmlFileUploader: boolean\n  /// The factory for upload widget.\n  /// The widget will be displayed when the file is uploading.\n  /// It takes the position and spec as parameters.\n  /// It should return a `Decoration` of Prosemirror.\n  /// By default, it will return `<span>Upload in progress...</span>`.\n  uploadWidgetFactory: (pos: number, spec: Parameters<typeof Decoration.widget>[2]) => Decoration\n}\n\n/// A slice that contains the configuration for upload.\n/// It should be typed of `UploadConfig`.\nexport const uploadConfig = $ctx<UploadOptions, 'uploadConfig'>({\n  uploader: defaultUploader,\n  enableHtmlFileUploader: false,\n  uploadWidgetFactory: (pos, spec) => {\n    const widgetDOM = document.createElement('span')\n    widgetDOM.textContent = 'Upload in progress...'\n    return Decoration.widget(pos, widgetDOM, spec)\n  },\n}, 'uploadConfig')\n\nuploadConfig.meta = {\n  package: '@milkdown/plugin-upload',\n  displayName: 'Ctx<uploadConfig>',\n}\n\n/// The prosemirror plugin for upload.\nexport const uploadPlugin = $prose((ctx) => {\n  const pluginKey = new PluginKey('MILKDOWN_UPLOAD')\n\n  const findPlaceholder = (state: EditorState, id: symbol): number => {\n    const decorations = pluginKey.getState(state)\n    if (!decorations)\n      return -1\n    const found = decorations.find(undefined, undefined, (spec: Spec) => spec.id === id)\n    if (!found.length)\n      return -1\n    return found[0]?.from ?? -1\n  }\n\n  const handleUpload = (view: EditorView, event: DragEvent | ClipboardEvent, files: FileList | undefined) => {\n    if (!files || files.length <= 0)\n      return false\n\n    const id = Symbol('upload symbol')\n    const schema = ctx.get(schemaCtx)\n    const { tr } = view.state\n    const insertPos = event instanceof DragEvent\n      ? view.posAtCoords({ left: event.clientX, top: event.clientY })?.pos ?? tr.selection.from\n      : tr.selection.from\n    view.dispatch(tr.setMeta(pluginKey, { add: { id, pos: insertPos } }))\n\n    const { uploader } = ctx.get(uploadConfig.key)\n    uploader(files, schema)\n      .then((fragment) => {\n        const pos = findPlaceholder(view.state, id)\n        if (pos < 0)\n          return\n\n        view.dispatch(\n          view.state.tr\n            .replaceWith(pos, pos, fragment)\n            .setMeta(pluginKey, { remove: { id } }),\n        )\n      })\n      .catch((e) => {\n        // eslint-disable-next-line no-console\n        console.error(e)\n      })\n    return true\n  }\n\n  return new Plugin({\n    key: pluginKey,\n    state: {\n      init() {\n        return DecorationSet.empty\n      },\n      apply(this: Plugin, tr, set) {\n        const _set = set.map(tr.mapping, tr.doc)\n        const action = tr.getMeta(this)\n        if (!action)\n          return _set\n\n        if (action.add) {\n          const { uploadWidgetFactory } = ctx.get(uploadConfig.key)\n\n          const decoration = uploadWidgetFactory(action.add.pos, { id: action.add.id })\n          return _set.add(tr.doc, [decoration])\n        }\n        if (action.remove) {\n          const target = _set.find(undefined, undefined, (spec: Spec) => spec.id === action.remove.id)\n          return _set.remove(target)\n        }\n\n        return _set\n      },\n    },\n    props: {\n      decorations(this: Plugin, state) {\n        return this.getState(state)\n      },\n      handlePaste: (view, event) => {\n        const { enableHtmlFileUploader } = ctx.get(uploadConfig.key)\n        if (!(event instanceof ClipboardEvent))\n          return false\n\n        if (!enableHtmlFileUploader && event.clipboardData?.getData('text/html'))\n          return false\n\n        return handleUpload(view, event, event.clipboardData?.files)\n      },\n      handleDrop: (view, event) => {\n        if (!(event instanceof DragEvent))\n          return false\n\n        return handleUpload(view, event, event.dataTransfer?.files)\n      },\n    },\n  })\n})\n\nuploadPlugin.meta = {\n  package: '@milkdown/plugin-upload',\n  displayName: 'Prose<upload>',\n}\n","import type { MilkdownPlugin } from '@milkdown/ctx'\nimport { uploadConfig, uploadPlugin } from './upload'\n\nexport * from './upload'\nexport * from './default-uploader'\n\n/// All plugins exported by this package.\nexport const upload: MilkdownPlugin[] = [uploadConfig, uploadPlugin]\n"],"names":["readImageAsBase64","file","resolve","reader","defaultUploader","files","schema","imgs","i","image","missingNodeInSchema","img","alt","src","uploadConfig","$ctx","pos","spec","widgetDOM","Decoration","uploadPlugin","$prose","ctx","pluginKey","PluginKey","findPlaceholder","state","id","decorations","found","_a","handleUpload","view","event","schemaCtx","tr","insertPos","uploader","fragment","e","Plugin","DecorationSet","set","_set","action","uploadWidgetFactory","decoration","target","enableHtmlFileUploader","_b","upload"],"mappings":"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"}