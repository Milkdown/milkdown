{"version":3,"file":"index.es.js","sources":["../src/index.ts"],"sourcesContent":["import {\n  editorViewOptionsCtx,\n  parserCtx,\n  schemaCtx,\n  serializerCtx,\n} from '@milkdown/core'\nimport { getNodeFromSchema } from '@milkdown/prose'\nimport type { Node, Slice } from '@milkdown/prose/model'\nimport { DOMParser, DOMSerializer } from '@milkdown/prose/model'\nimport { Plugin, PluginKey, TextSelection } from '@milkdown/prose/state'\nimport { $prose } from '@milkdown/utils'\n\ntype UnknownRecord = Record<string, unknown>\nfunction isPureText(\n  content: UnknownRecord | UnknownRecord[] | undefined | null\n): boolean {\n  if (!content) return false\n  if (Array.isArray(content)) {\n    if (content.length > 1) return false\n    return isPureText(content[0])\n  }\n\n  const child = content.content\n  if (child) return isPureText(child as UnknownRecord[])\n\n  return content.type === 'text'\n}\n\nfunction isTextOnlySlice(slice: Slice): Node | false {\n  if (slice.content.childCount === 1) {\n    const node = slice.content.firstChild\n    if (node?.type.name === 'text' && node.marks.length === 0) return node\n\n    if (node?.type.name === 'paragraph' && node.childCount === 1) {\n      const _node = node.firstChild\n      if (_node?.type.name === 'text' && _node.marks.length === 0) return _node\n    }\n  }\n\n  return false\n}\n\n/// The prosemirror plugin for clipboard.\nexport const clipboard = $prose((ctx) => {\n  const schema = ctx.get(schemaCtx)\n\n  // Set editable props for https://github.com/Milkdown/milkdown/issues/190\n  ctx.update(editorViewOptionsCtx, (prev) => ({\n    ...prev,\n    editable: prev.editable ?? (() => true),\n  }))\n\n  const key = new PluginKey('MILKDOWN_CLIPBOARD')\n  const plugin = new Plugin({\n    key,\n    props: {\n      handlePaste: (view, event) => {\n        const parser = ctx.get(parserCtx)\n        const editable = view.props.editable?.(view.state)\n        const { clipboardData } = event\n        if (!editable || !clipboardData) return false\n\n        const currentNode = view.state.selection.$from.node()\n        if (currentNode.type.spec.code) return false\n\n        const text = clipboardData.getData('text/plain')\n\n        // if is copied from vscode, try to create a code block\n        const vscodeData = clipboardData.getData('vscode-editor-data')\n        if (vscodeData) {\n          const data = JSON.parse(vscodeData)\n          const language = data?.mode\n          if (text && language) {\n            const { tr } = view.state\n            const codeBlock = getNodeFromSchema('code_block', schema)\n\n            tr.replaceSelectionWith(codeBlock.create({ language }))\n              .setSelection(\n                TextSelection.near(\n                  tr.doc.resolve(Math.max(0, tr.selection.from - 2))\n                )\n              )\n              .insertText(text.replace(/\\r\\n?/g, '\\n'))\n\n            view.dispatch(tr)\n            return true\n          }\n        }\n\n        const html = clipboardData.getData('text/html')\n        if (html.length === 0 && text.length === 0) return false\n\n        const domParser = DOMParser.fromSchema(schema)\n        let dom\n        if (html.length === 0) {\n          const slice = parser(text)\n          if (!slice || typeof slice === 'string') return false\n\n          dom = DOMSerializer.fromSchema(schema).serializeFragment(\n            slice.content\n          )\n        } else {\n          const template = document.createElement('template')\n          template.innerHTML = html\n          dom = template.content.cloneNode(true)\n          template.remove()\n        }\n\n        const slice = domParser.parseSlice(dom)\n        const node = isTextOnlySlice(slice)\n        if (node) {\n          view.dispatch(view.state.tr.replaceSelectionWith(node, true))\n          return true\n        }\n\n        view.dispatch(view.state.tr.replaceSelection(slice))\n        return true\n      },\n      clipboardTextSerializer: (slice) => {\n        const serializer = ctx.get(serializerCtx)\n        const isText = isPureText(slice.content.toJSON())\n        if (isText)\n          return (slice.content as unknown as Node).textBetween(\n            0,\n            slice.content.size,\n            '\\n\\n'\n          )\n\n        const doc = schema.topNodeType.createAndFill(undefined, slice.content)\n        if (!doc) return ''\n        const value = serializer(doc)\n        return value\n      },\n    },\n  })\n\n  return plugin\n})\n\nclipboard.meta = {\n  displayName: 'Prose<clipboard>',\n  package: '@milkdown/plugin-clipboard',\n}\n"],"names":["isPureText","content","child","isTextOnlySlice","slice","node","_node","clipboard","$prose","ctx","schema","schemaCtx","editorViewOptionsCtx","prev","key","PluginKey","Plugin","view","event","parser","parserCtx","editable","_b","_a","clipboardData","text","vscodeData","data","language","tr","codeBlock","getNodeFromSchema","TextSelection","html","domParser","DOMParser","dom","DOMSerializer","template","serializer","serializerCtx","doc"],"mappings":"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"}