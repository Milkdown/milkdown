{"version":3,"file":"index.es.js","sources":["../src/collab-service.ts","../src/index.ts"],"sourcesContent":["import type { Ctx } from '@milkdown/ctx'\nimport type { DefaultValue } from '@milkdown/core'\nimport {\n  editorViewCtx,\n  getDoc,\n  parserCtx,\n  prosePluginsCtx,\n  schemaCtx,\n} from '@milkdown/core'\nimport { ctxNotBind, missingYjsDoc } from '@milkdown/exception'\nimport { keydownHandler } from '@milkdown/prose/keymap'\nimport type { Node } from '@milkdown/prose/model'\nimport { Plugin, PluginKey } from '@milkdown/prose/state'\nimport type { DecorationAttrs } from '@milkdown/prose/view'\nimport {\n  prosemirrorToYDoc,\n  redo,\n  undo,\n  yCursorPlugin,\n  yCursorPluginKey,\n  yXmlFragmentToProseMirrorRootNode,\n  ySyncPlugin,\n  ySyncPluginKey,\n  yUndoPlugin,\n  yUndoPluginKey,\n} from 'y-prosemirror'\nimport type { Awareness } from 'y-protocols/awareness'\nimport type { Doc, PermanentUserData, XmlFragment } from 'yjs'\nimport { applyUpdate, encodeStateAsUpdate } from 'yjs'\n\n/// @internal\nexport interface ColorDef {\n  light: string\n  dark: string\n}\n\n/// @internal\nexport interface YSyncOpts {\n  colors?: Array<ColorDef>\n  colorMapping?: Map<string, ColorDef>\n  permanentUserData?: PermanentUserData | null\n}\n\n/// @internal\nexport interface yCursorOpts {\n  cursorBuilder?: (arg: any) => HTMLElement\n  selectionBuilder?: (arg: any) => DecorationAttrs\n  getSelection?: (arg: any) => any\n}\n\n/// @internal\nexport interface yUndoOpts {\n  protectedNodes?: Set<string>\n  trackedOrigins?: any[]\n  undoManager?: any\n}\n\n/// Options for the collab service.\nexport interface CollabServiceOptions {\n  /// The field name of the yCursor plugin.\n  yCursorStateField?: string\n\n  /// Options for the ySync plugin.\n  ySyncOpts?: YSyncOpts\n\n  /// Options for the yCursor plugin.\n  yCursorOpts?: yCursorOpts\n\n  /// Options for the yUndo plugin.\n  yUndoOpts?: yUndoOpts\n}\n\n/// @internal\nexport const CollabKeymapPluginKey = new PluginKey('MILKDOWN_COLLAB_KEYMAP')\n\nconst collabPluginKeys = [\n  CollabKeymapPluginKey,\n  ySyncPluginKey,\n  yCursorPluginKey,\n  yUndoPluginKey,\n]\n\n/// The collab service is used to manage the collaboration plugins.\n/// It is used to provide the collaboration plugins to the editor.\nexport class CollabService {\n  /// @internal\n  #options: CollabServiceOptions = {}\n  /// @internal\n  #xmlFragment: XmlFragment | null = null\n  /// @internal\n  #awareness: Awareness | null = null\n  /// @internal\n  #ctx: Ctx | null = null\n  /// @internal\n  #connected = false\n\n  /// @internal\n  #valueToNode(value: DefaultValue): Node | undefined {\n    if (!this.#ctx) throw ctxNotBind()\n\n    const schema = this.#ctx.get(schemaCtx)\n    const parser = this.#ctx.get(parserCtx)\n\n    const doc = getDoc(value, parser, schema)\n    return doc\n  }\n\n  /// @internal\n  #createPlugins(): Plugin[] {\n    if (!this.#xmlFragment) throw missingYjsDoc()\n    const { ySyncOpts, yUndoOpts } = this.#options\n    const plugins = [\n      ySyncPlugin(this.#xmlFragment, ySyncOpts),\n      yUndoPlugin(yUndoOpts),\n      new Plugin({\n        key: CollabKeymapPluginKey,\n        props: {\n          handleKeyDown: keydownHandler({\n            'Mod-z': undo,\n            'Mod-y': redo,\n            'Mod-Shift-z': redo,\n          }),\n        },\n      }),\n    ]\n    if (this.#awareness) {\n      const { yCursorOpts, yCursorStateField } = this.#options\n      plugins.push(\n        yCursorPlugin(\n          this.#awareness,\n          yCursorOpts as Required<yCursorOpts>,\n          yCursorStateField\n        )\n      )\n    }\n\n    return plugins\n  }\n\n  /// @internal\n  #flushEditor(plugins: Plugin[]) {\n    if (!this.#ctx) throw ctxNotBind()\n    this.#ctx.set(prosePluginsCtx, plugins)\n\n    const view = this.#ctx.get(editorViewCtx)\n    const newState = view.state.reconfigure({ plugins })\n    view.updateState(newState)\n  }\n\n  /// Bind the context to the service.\n  bindCtx(ctx: Ctx) {\n    this.#ctx = ctx\n    return this\n  }\n\n  /// Bind the document to the service.\n  bindDoc(doc: Doc) {\n    this.#xmlFragment = doc.getXmlFragment('prosemirror')\n    return this\n  }\n\n  /// Bind the Yjs XmlFragment to the service.\n  bindXmlFragment(xmlFragment: XmlFragment) {\n    this.#xmlFragment = xmlFragment\n    return this\n  }\n\n  /// Set the options of the service.\n  setOptions(options: CollabServiceOptions) {\n    this.#options = options\n    return this\n  }\n\n  /// Merge some options to the service.\n  /// The options will be merged to the existing options.\n  /// THe options should be partial of the `CollabServiceOptions`.\n  mergeOptions(options: Partial<CollabServiceOptions>) {\n    Object.assign(this.#options, options)\n    return this\n  }\n\n  /// Set the awareness of the service.\n  setAwareness(awareness: Awareness) {\n    this.#awareness = awareness\n    return this\n  }\n\n  /// Apply the template to the document.\n  applyTemplate(\n    template: DefaultValue,\n    condition?: (yDocNode: Node, templateNode: Node) => boolean\n  ) {\n    if (!this.#ctx) throw ctxNotBind()\n    if (!this.#xmlFragment) throw missingYjsDoc()\n    const conditionFn =\n      condition || ((yDocNode) => yDocNode.textContent.length === 0)\n\n    const node = this.#valueToNode(template)\n    const schema = this.#ctx.get(schemaCtx)\n    const yDocNode = yXmlFragmentToProseMirrorRootNode(\n      this.#xmlFragment,\n      schema\n    )\n\n    if (node && conditionFn(yDocNode, node)) {\n      const fragment = this.#xmlFragment\n      fragment.delete(0, fragment.length)\n      const templateDoc = prosemirrorToYDoc(node)\n      const template = encodeStateAsUpdate(templateDoc)\n      if (fragment.doc) applyUpdate(fragment.doc, template)\n      templateDoc.destroy()\n    }\n\n    return this\n  }\n\n  /// Connect the service.\n  connect() {\n    if (!this.#ctx) throw ctxNotBind()\n    if (this.#connected) return\n\n    const prosePlugins = this.#ctx.get(prosePluginsCtx)\n    const collabPlugins = this.#createPlugins()\n    const plugins = prosePlugins.concat(collabPlugins)\n\n    this.#flushEditor(plugins)\n    this.#connected = true\n\n    return this\n  }\n\n  /// Disconnect the service.\n  disconnect() {\n    if (!this.#ctx) throw ctxNotBind()\n    if (!this.#connected) return this\n\n    const prosePlugins = this.#ctx.get(prosePluginsCtx)\n    const plugins = prosePlugins.filter(\n      (plugin) =>\n        !plugin.spec.key || !collabPluginKeys.includes(plugin.spec.key)\n    )\n\n    this.#flushEditor(plugins)\n    this.#connected = false\n\n    return this\n  }\n}\n","import type { MilkdownPlugin } from '@milkdown/ctx'\nimport { createSlice, createTimer } from '@milkdown/ctx'\nimport { EditorViewReady } from '@milkdown/core'\n\nimport { CollabService } from './collab-service'\n\n/// A slice that contains the collab service.\nexport const collabServiceCtx = createSlice(\n  new CollabService(),\n  'collabServiceCtx'\n)\n\n/// The timer that indicates the collab plugin is ready.\nexport const CollabReady = createTimer('CollabReady')\n\n/// The collab plugin.\nexport const collab: MilkdownPlugin = (ctx) => {\n  const collabService = new CollabService()\n  ctx.inject(collabServiceCtx, collabService).record(CollabReady)\n  return async () => {\n    await ctx.wait(EditorViewReady)\n    collabService.bindCtx(ctx)\n    ctx.done(CollabReady)\n    return () => {\n      ctx.remove(collabServiceCtx).clearTimer(CollabReady)\n    }\n  }\n}\ncollab.meta = {\n  package: '@milkdown/plugin-collab',\n  displayName: 'Collab',\n}\n\nexport * from './collab-service'\n"],"names":["CollabKeymapPluginKey","PluginKey","collabPluginKeys","ySyncPluginKey","yCursorPluginKey","yUndoPluginKey","CollabService","__privateAdd","_CollabService_instances","_options","_xmlFragment","_awareness","_ctx","_connected","ctx","__privateSet","doc","xmlFragment","options","__privateGet","awareness","template","condition","ctxNotBind","missingYjsDoc","conditionFn","yDocNode","node","__privateMethod","valueToNode_fn","schema","schemaCtx","yXmlFragmentToProseMirrorRootNode","fragment","templateDoc","prosemirrorToYDoc","encodeStateAsUpdate","applyUpdate","prosePlugins","prosePluginsCtx","collabPlugins","createPlugins_fn","plugins","flushEditor_fn","plugin","value","parser","parserCtx","getDoc","ySyncOpts","yUndoOpts","ySyncPlugin","yUndoPlugin","Plugin","keydownHandler","undo","redo","yCursorOpts","yCursorStateField","yCursorPlugin","view","editorViewCtx","newState","collabServiceCtx","createSlice","CollabReady","createTimer","collab","collabService","EditorViewReady"],"mappings":"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"}