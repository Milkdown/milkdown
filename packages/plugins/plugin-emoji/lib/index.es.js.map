{"version":3,"file":"index.es.js","sources":["../src/__internal__/parse.ts","../src/__internal__/remark-twemoji.ts","../src/__internal__/with-meta.ts","../src/index.ts"],"sourcesContent":["import twemoji from 'twemoji'\n\nconst setAttr = (text: string) => ({ title: text })\n\n/// @internal\n/// This is copied from https://github.com/twitter/twemoji/blob/master/index.d.ts#L14\n/// The file is not released for some reason, so I have to copy it here.\nexport interface TwemojiOptions {\n  /**\n   * Default: Cloudflare\n   */\n  base?: string\n  /**\n   * Default: .png\n   */\n  ext?: string\n  /**\n   * Default: emoji\n   */\n  className?: string\n  /**\n   * Default: 72x72\n   */\n  size?: string | number\n  /**\n   * To render with SVG use `folder: svg, ext: .svg`\n   */\n  folder?: string\n  /**\n   * The function to invoke in order to generate image src(s).\n   */\n  callback?: (icon: string, options: object, variant: string) => string | false\n  /**\n   * The function to invoke in order to generate additional, custom attributes for the image tag.\n   * Default () => ({})\n   * @param icon the lower case HEX code point i.e. \"1f4a9\"\n   * @param variant variant the optional \\uFE0F (\"as image\") variant, in case this info is anyhow meaningful. By default this is ignored.\n   *\n   */\n  attributes?: (icon: string, variant: string) => object\n}\n\nexport function parse(emoji: string, twemojiOptions?: TwemojiOptions): string {\n  return twemoji.parse(emoji, {\n    attributes: setAttr,\n    base: 'https://cdn.jsdelivr.net/gh/twitter/twemoji/assets/',\n    ...twemojiOptions,\n  }) as unknown as string\n}\n","import type { Node, RemarkPluginRaw } from '@milkdown/transformer'\nimport emojiRegex from 'emoji-regex'\n\nimport { type TwemojiOptions, parse } from './parse'\n\nconst regex = emojiRegex()\n\nconst isParent = (node: Node): node is Node & { children: Node[] } =>\n  !!(node as Node & { children: Node[] }).children\nconst isLiteral = (node: Node): node is Node & { value: string } =>\n  !!(node as Node & { value: string }).value\n\nfunction flatMap(\n  ast: Node,\n  fn: (node: Node, index: number, parent: Node | null) => Node[]\n) {\n  return transform(ast, 0, null)[0]\n\n  function transform(node: Node, index: number, parent: Node | null) {\n    if (isParent(node)) {\n      const out = []\n      for (let i = 0, n = node.children.length; i < n; i++) {\n        const nthChild = node.children[i]\n        if (nthChild) {\n          const xs = transform(nthChild, i, node)\n          if (xs) {\n            for (let j = 0, m = xs.length; j < m; j++) {\n              const item = xs[j]\n              if (item) out.push(item)\n            }\n          }\n        }\n      }\n      node.children = out\n    }\n\n    return fn(node, index, parent)\n  }\n}\n\nexport const twemojiPlugin: RemarkPluginRaw<TwemojiOptions> = (\n  twemojiOptions\n) => {\n  function transformer(tree: Node) {\n    flatMap(tree, (node) => {\n      if (!isLiteral(node)) return [node]\n\n      // Should not convert code block\n      if (node.type === 'code') return [node]\n\n      const value = node.value\n      const output: Array<Node & { value: string }> = []\n      let match\n      let str = value\n      while ((match = regex.exec(str))) {\n        const { index } = match\n        const emoji = match[0]\n        if (emoji) {\n          if (index > 0) output.push({ ...node, value: str.slice(0, index) })\n\n          output.push({\n            ...node,\n            value: parse(emoji, twemojiOptions),\n            type: 'emoji',\n          })\n          str = str.slice(index + emoji.length)\n        }\n        regex.lastIndex = 0\n      }\n      if (str.length) output.push({ ...node, value: str })\n\n      return output\n    })\n  }\n  return transformer\n}\n","import type { Meta, MilkdownPlugin } from '@milkdown/ctx'\n\nexport function withMeta<T extends MilkdownPlugin>(\n  plugin: T,\n  meta: Partial<Meta> & Pick<Meta, 'displayName'>\n): T {\n  Object.assign(plugin, {\n    meta: {\n      package: '@milkdown/plugin-emoji',\n      ...meta,\n    },\n  })\n\n  return plugin\n}\n","import type { MilkdownPlugin } from '@milkdown/ctx'\nimport type { RemarkPluginRaw } from '@milkdown/transformer'\nimport { expectDomTypeError } from '@milkdown/exception'\nimport { InputRule } from '@milkdown/prose/inputrules'\nimport { $inputRule, $nodeAttr, $nodeSchema, $remark } from '@milkdown/utils'\nimport { get } from 'node-emoji'\nimport type { RemarkEmojiOptions } from 'remark-emoji'\nimport remarkEmoji from 'remark-emoji'\n\nimport { parse } from './__internal__/parse'\nimport { twemojiPlugin } from './__internal__/remark-twemoji'\nimport { withMeta } from './__internal__/with-meta'\n\n/// HTML attributes for emoji node.\nexport const emojiAttr = $nodeAttr('emoji', () => ({\n  span: {},\n  img: {},\n}))\nwithMeta(emojiAttr, {\n  displayName: 'Attr<emoji>',\n})\n\n/// Schema for emoji node.\nexport const emojiSchema = $nodeSchema('emoji', (ctx) => ({\n  group: 'inline',\n  inline: true,\n  attrs: {\n    html: {\n      default: '',\n    },\n  },\n  parseDOM: [\n    {\n      tag: 'span[data-type=\"emoji\"]',\n      getAttrs: (dom) => {\n        if (!(dom instanceof HTMLElement)) throw expectDomTypeError(dom)\n\n        return { html: dom.innerHTML }\n      },\n    },\n  ],\n  toDOM: (node) => {\n    const attrs = ctx.get(emojiAttr.key)(node)\n    const tmp = document.createElement('span')\n    tmp.innerHTML = node.attrs.html\n    const dom = tmp.firstElementChild?.cloneNode()\n    tmp.remove()\n    if (dom && dom instanceof HTMLElement)\n      Object.entries<string>(attrs.img).forEach(([key, value]) =>\n        dom.setAttribute(key, value)\n      )\n\n    return ['span', { ...attrs.container, 'data-type': 'emoji' }, dom]\n  },\n  parseMarkdown: {\n    match: ({ type }) => type === 'emoji',\n    runner: (state, node, type) => {\n      state.addNode(type, { html: node.value as string })\n    },\n  },\n  toMarkdown: {\n    match: (node) => node.type.name === 'emoji',\n    runner: (state, node) => {\n      const span = document.createElement('span')\n      span.innerHTML = node.attrs.html\n      const img = span.querySelector('img')\n      const title = img?.title || img?.alt\n      span.remove()\n      state.addNode('text', undefined, title)\n    },\n  },\n}))\n\nwithMeta(emojiSchema.node, {\n  displayName: 'NodeSchema<emoji>',\n})\nwithMeta(emojiSchema.ctx, {\n  displayName: 'NodeSchemaCtx<emoji>',\n})\n\n/// This plugin wraps [remark-emoji](https://github.com/rhysd/remark-emoji).\nexport const remarkEmojiPlugin = $remark(\n  'remarkEmoji',\n  () => remarkEmoji as RemarkPluginRaw<RemarkEmojiOptions>\n)\n\nwithMeta(remarkEmojiPlugin.plugin, {\n  displayName: 'Remark<remarkEmojiPlugin>',\n})\n\nwithMeta(remarkEmojiPlugin.options, {\n  displayName: 'RemarkConfig<remarkEmojiPlugin>',\n})\n\n/// This plugin is used for transforming emoji to twemoji.\nexport const remarkTwemojiPlugin = $remark('remarkTwemoji', () => twemojiPlugin)\n\nwithMeta(remarkTwemojiPlugin.plugin, {\n  displayName: 'Remark<remarkTwemojiPlugin>',\n})\n\nwithMeta(remarkTwemojiPlugin.options, {\n  displayName: 'RemarkConfig<remarkTwemojiPlugin>',\n})\n\n/// Input rule for inserting emoji.\n/// For example, `:smile:` will be replaced with `ðŸ˜„`.\nexport const insertEmojiInputRule = $inputRule(\n  (ctx) =>\n    new InputRule(/(:([^:\\s]+):)$/, (state, match, start, end) => {\n      const content = match[0]\n      if (!content) return null\n      const got = get(content)\n      if (!got || content.includes(got)) return null\n\n      const html = parse(got, ctx.get(remarkTwemojiPlugin.options.key))\n\n      return state.tr\n        .setMeta('emoji', true)\n        .replaceRangeWith(start, end, emojiSchema.type(ctx).create({ html }))\n        .scrollIntoView()\n    })\n)\n\nwithMeta(insertEmojiInputRule, {\n  displayName: 'InputRule<insertEmojiInputRule>',\n})\n\n/// All plugins exported by this package.\nexport const emoji: MilkdownPlugin[] = [\n  emojiAttr,\n  remarkEmojiPlugin,\n  remarkTwemojiPlugin,\n  emojiSchema,\n  insertEmojiInputRule,\n].flat()\n"],"names":["setAttr","text","parse","emoji","twemojiOptions","twemoji","regex","emojiRegex","isParent","node","isLiteral","flatMap","ast","fn","transform","index","parent","out","i","n","nthChild","xs","j","m","item","twemojiPlugin","transformer","tree","value","output","match","str","withMeta","plugin","meta","emojiAttr","$nodeAttr","emojiSchema","$nodeSchema","ctx","dom","expectDomTypeError","attrs","tmp","_a","key","type","state","span","img","title","remarkEmojiPlugin","$remark","remarkEmoji","remarkTwemojiPlugin","insertEmojiInputRule","$inputRule","InputRule","start","end","content","got","get","html"],"mappings":"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"}